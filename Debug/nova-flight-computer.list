
nova-flight-computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a06c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a230  0800a230  0001a230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a290  0800a290  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a290  0800a290  0001a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a298  0800a298  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a298  0800a298  0001a298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800a2a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ed8  2000010c  0800a3ac  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fe4  0800a3ac  00021fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df04  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d07  00000000  00000000  0003e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  00041d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  000436a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005cdb  00000000  00000000  00044e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002078d  00000000  00000000  0004ab73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e60a1  00000000  00000000  0006b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001513a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c8c  00000000  00000000  001513f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a218 	.word	0x0800a218

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	0800a218 	.word	0x0800a218

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 ff73 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f843 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fb83 	bl	8000c20 <MX_GPIO_Init>
  MX_SPI1_Init();
 800051a:	f000 f931 	bl	8000780 <MX_SPI1_Init>
  MX_SPI3_Init();
 800051e:	f000 f965 	bl	80007ec <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 8000522:	f009 f8d7 	bl	80096d4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000526:	f000 f8ab 	bl	8000680 <MX_ADC1_Init>
  MX_I2C3_Init();
 800052a:	f000 f8fb 	bl	8000724 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800052e:	f000 fb23 	bl	8000b78 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000532:	f000 fb4b 	bl	8000bcc <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000536:	f000 f98f 	bl	8000858 <MX_TIM2_Init>
  MX_TIM3_Init();
 800053a:	f000 fa03 	bl	8000944 <MX_TIM3_Init>
  MX_TIM4_Init();
 800053e:	f000 fa83 	bl	8000a48 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uint32_t Green_LED_CH1_DC = 1373;
 8000542:	f240 535d 	movw	r3, #1373	; 0x55d
 8000546:	607b      	str	r3, [r7, #4]
  uint32_t Buzzer_DC = 21972; // 50% duty = 21972.5
 8000548:	f245 53d4 	movw	r3, #21972	; 0x55d4
 800054c:	603b      	str	r3, [r7, #0]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800054e:	2104      	movs	r1, #4
 8000550:	480f      	ldr	r0, [pc, #60]	; (8000590 <main+0x88>)
 8000552:	f004 fbbb 	bl	8004ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000556:	2100      	movs	r1, #0
 8000558:	480e      	ldr	r0, [pc, #56]	; (8000594 <main+0x8c>)
 800055a:	f004 fbb7 	bl	8004ccc <HAL_TIM_PWM_Start>

  TIM3->CCR1 = Green_LED_CH1_DC;
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <main+0x90>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6353      	str	r3, [r2, #52]	; 0x34
  TIM2->CCR2 = Buzzer_DC;
 8000564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	6393      	str	r3, [r2, #56]	; 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800056c:	2104      	movs	r1, #4
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <main+0x88>)
 8000570:	f004 fbac 	bl	8004ccc <HAL_TIM_PWM_Start>
	  HAL_Delay(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f000 ffb0 	bl	80014dc <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800057c:	2104      	movs	r1, #4
 800057e:	4804      	ldr	r0, [pc, #16]	; (8000590 <main+0x88>)
 8000580:	f004 fc6c 	bl	8004e5c <HAL_TIM_PWM_Stop>
	  HAL_Delay(1000);
 8000584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000588:	f000 ffa8 	bl	80014dc <HAL_Delay>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800058c:	e7ee      	b.n	800056c <main+0x64>
 800058e:	bf00      	nop
 8000590:	20000274 	.word	0x20000274
 8000594:	200002bc 	.word	0x200002bc
 8000598:	40000400 	.word	0x40000400

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f009 fe2c 	bl	800a208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <SystemClock_Config+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <SystemClock_Config+0xdc>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <SystemClock_Config+0xdc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a25      	ldr	r2, [pc, #148]	; (800067c <SystemClock_Config+0xe0>)
 80005e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <SystemClock_Config+0xe0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000610:	23b4      	movs	r3, #180	; 0xb4
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4618      	mov	r0, r3
 8000626:	f003 ff81 	bl	800452c <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000630:	f000 fbae 	bl	8000d90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000634:	f003 f8b6 	bl	80037a4 <HAL_PWREx_EnableOverDrive>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800063e:	f000 fba7 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000658:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2105      	movs	r1, #5
 8000660:	4618      	mov	r0, r3
 8000662:	f003 f8ef 	bl	8003844 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800066c:	f000 fb90 	bl	8000d90 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_ADC1_Init+0x98>)
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <MX_ADC1_Init+0x9c>)
 8000696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_ADC1_Init+0x98>)
 800069a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800069e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_ADC1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_ADC1_Init+0x98>)
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <MX_ADC1_Init+0xa0>)
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_ADC1_Init+0x98>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_ADC1_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_ADC1_Init+0x98>)
 80006dc:	2201      	movs	r2, #1
 80006de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_ADC1_Init+0x98>)
 80006e2:	f000 ff1f 	bl	8001524 <HAL_ADC_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 fb50 	bl	8000d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_ADC1_Init+0x98>)
 8000702:	f000 ff53 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800070c:	f000 fb40 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000128 	.word	0x20000128
 800071c:	40012000 	.word	0x40012000
 8000720:	0f000001 	.word	0x0f000001

08000724 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C3_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MX_I2C3_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C3_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_I2C3_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C3_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2C3_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_I2C3_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2C3_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2C3_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2C3_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2C3_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C3_Init+0x50>)
 8000762:	f001 fc11 	bl	8001f88 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 fb10 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000170 	.word	0x20000170
 8000778:	40005c00 	.word	0x40005c00
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_SPI1_Init+0x64>)
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_SPI1_Init+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_SPI1_Init+0x64>)
 800078c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_SPI1_Init+0x64>)
 80007d2:	f004 f949 	bl	8004a68 <HAL_SPI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 fad8 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200001c4 	.word	0x200001c4
 80007e8:	40013000 	.word	0x40013000

080007ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_SPI3_Init+0x64>)
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <MX_SPI3_Init+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_SPI3_Init+0x64>)
 80007f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_SPI3_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_SPI3_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_SPI3_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_SPI3_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_SPI3_Init+0x64>)
 8000818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800081c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_SPI3_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_SPI3_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_SPI3_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_SPI3_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_SPI3_Init+0x64>)
 8000838:	220a      	movs	r2, #10
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_SPI3_Init+0x64>)
 800083e:	f004 f913 	bl	8004a68 <HAL_SPI_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000848:	f000 faa2 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000021c 	.word	0x2000021c
 8000854:	40003c00 	.word	0x40003c00

08000858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MX_TIM2_Init+0xe8>)
 800088a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_TIM2_Init+0xe8>)
 8000892:	2202      	movs	r2, #2
 8000894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MX_TIM2_Init+0xe8>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 43945;
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_TIM2_Init+0xe8>)
 800089e:	f64a 32a9 	movw	r2, #43945	; 0xaba9
 80008a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_TIM2_Init+0xe8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_TIM2_Init+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b0:	4823      	ldr	r0, [pc, #140]	; (8000940 <MX_TIM2_Init+0xe8>)
 80008b2:	f004 f962 	bl	8004b7a <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008bc:	f000 fa68 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ca:	4619      	mov	r1, r3
 80008cc:	481c      	ldr	r0, [pc, #112]	; (8000940 <MX_TIM2_Init+0xe8>)
 80008ce:	f004 fbf7 	bl	80050c0 <HAL_TIM_ConfigClockSource>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008d8:	f000 fa5a 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008dc:	4818      	ldr	r0, [pc, #96]	; (8000940 <MX_TIM2_Init+0xe8>)
 80008de:	f004 f99b 	bl	8004c18 <HAL_TIM_PWM_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008e8:	f000 fa52 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4619      	mov	r1, r3
 80008fa:	4811      	ldr	r0, [pc, #68]	; (8000940 <MX_TIM2_Init+0xe8>)
 80008fc:	f004 ffb8 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000906:	f000 fa43 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090a:	2360      	movs	r3, #96	; 0x60
 800090c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2204      	movs	r2, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_TIM2_Init+0xe8>)
 8000922:	f004 fb0b 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800092c:	f000 fa30 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_TIM2_Init+0xe8>)
 8000932:	f000 fbef 	bl	8001114 <HAL_TIM_MspPostInit>

}
 8000936:	bf00      	nop
 8000938:	3738      	adds	r7, #56	; 0x38
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000274 	.word	0x20000274

08000944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	; 0x38
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000974:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <MX_TIM3_Init+0xfc>)
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <MX_TIM3_Init+0x100>)
 8000978:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 800097a:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <MX_TIM3_Init+0xfc>)
 800097c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000980:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <MX_TIM3_Init+0xfc>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2746;
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <MX_TIM3_Init+0xfc>)
 800098a:	f640 22ba 	movw	r2, #2746	; 0xaba
 800098e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <MX_TIM3_Init+0xfc>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_TIM3_Init+0xfc>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800099c:	4828      	ldr	r0, [pc, #160]	; (8000a40 <MX_TIM3_Init+0xfc>)
 800099e:	f004 f8ec 	bl	8004b7a <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009a8:	f000 f9f2 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <MX_TIM3_Init+0xfc>)
 80009ba:	f004 fb81 	bl	80050c0 <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009c4:	f000 f9e4 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009c8:	481d      	ldr	r0, [pc, #116]	; (8000a40 <MX_TIM3_Init+0xfc>)
 80009ca:	f004 f925 	bl	8004c18 <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009d4:	f000 f9dc 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4619      	mov	r1, r3
 80009e6:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_TIM3_Init+0xfc>)
 80009e8:	f004 ff42 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009f2:	f000 f9cd 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	; 0x60
 80009f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_TIM3_Init+0xfc>)
 8000a0e:	f004 fa95 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a18:	f000 f9ba 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2204      	movs	r2, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM3_Init+0xfc>)
 8000a24:	f004 fa8a 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000a2e:	f000 f9af 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a32:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM3_Init+0xfc>)
 8000a34:	f000 fb6e 	bl	8001114 <HAL_TIM_MspPostInit>

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	; 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200002bc 	.word	0x200002bc
 8000a44:	40000400 	.word	0x40000400

08000a48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <MX_TIM4_Init+0x12c>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a8a:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a98:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a9e:	4834      	ldr	r0, [pc, #208]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000aa0:	f004 f86b 	bl	8004b7a <HAL_TIM_Base_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000aaa:	f000 f971 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	482d      	ldr	r0, [pc, #180]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000abc:	f004 fb00 	bl	80050c0 <HAL_TIM_ConfigClockSource>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ac6:	f000 f963 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000aca:	4829      	ldr	r0, [pc, #164]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000acc:	f004 f8a4 	bl	8004c18 <HAL_TIM_PWM_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ad6:	f000 f95b 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4821      	ldr	r0, [pc, #132]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000aea:	f004 fec1 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000af4:	f000 f94c 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af8:	2360      	movs	r3, #96	; 0x60
 8000afa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000b10:	f004 fa14 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000b1a:	f000 f939 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2204      	movs	r2, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4812      	ldr	r0, [pc, #72]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000b26:	f004 fa09 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000b30:	f000 f92e 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2208      	movs	r2, #8
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000b3c:	f004 f9fe 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000b46:	f000 f923 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000b52:	f004 f9f3 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000b5c:	f000 f918 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <MX_TIM4_Init+0x128>)
 8000b62:	f000 fad7 	bl	8001114 <HAL_TIM_MspPostInit>

}
 8000b66:	bf00      	nop
 8000b68:	3738      	adds	r7, #56	; 0x38
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000304 	.word	0x20000304
 8000b74:	40000800 	.word	0x40000800

08000b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <MX_USART1_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f004 feda 	bl	8005968 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f8e9 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000034c 	.word	0x2000034c
 8000bc8:	40011000 	.word	0x40011000

08000bcc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <MX_USART6_UART_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_USART6_UART_Init+0x4c>)
 8000c04:	f004 feb0 	bl	8005968 <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f000 f8bf 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000390 	.word	0x20000390
 8000c1c:	40011400 	.word	0x40011400

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b51      	ldr	r3, [pc, #324]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a50      	ldr	r2, [pc, #320]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b4a      	ldr	r3, [pc, #296]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a49      	ldr	r2, [pc, #292]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b47      	ldr	r3, [pc, #284]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a42      	ldr	r2, [pc, #264]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b40      	ldr	r3, [pc, #256]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <MX_GPIO_Init+0x160>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PYRO_F_Pin|SPI3_CS_TELE_Pin|SPI1_CS_ICM_GPIO_Pin|SPI1_CS_H3L_GPIO_Pin
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f24a 1130 	movw	r1, #41264	; 0xa130
 8000cac:	4835      	ldr	r0, [pc, #212]	; (8000d84 <MX_GPIO_Init+0x164>)
 8000cae:	f001 f951 	bl	8001f54 <HAL_GPIO_WritePin>
                          |PYRO_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_MS5_GPIO_Pin|SPI1_CS_MMC_GPIO_Pin|PYRO_A_Pin|PYRO_B_Pin
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f24f 0103 	movw	r1, #61443	; 0xf003
 8000cb8:	4833      	ldr	r0, [pc, #204]	; (8000d88 <MX_GPIO_Init+0x168>)
 8000cba:	f001 f94b 	bl	8001f54 <HAL_GPIO_WritePin>
                          |PYRO_C_Pin|PYRO_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_FLASH_CS_GPIO_GPIO_Port, SPI3_FLASH_CS_GPIO_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc4:	4831      	ldr	r0, [pc, #196]	; (8000d8c <MX_GPIO_Init+0x16c>)
 8000cc6:	f001 f945 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PYRO_F_Pin SPI3_CS_TELE_Pin SPI1_CS_ICM_GPIO_Pin SPI1_CS_H3L_GPIO_Pin
                           PYRO_E_Pin */
  GPIO_InitStruct.Pin = PYRO_F_Pin|SPI3_CS_TELE_Pin|SPI1_CS_ICM_GPIO_Pin|SPI1_CS_H3L_GPIO_Pin
 8000cca:	f24a 1330 	movw	r3, #41264	; 0xa130
 8000cce:	617b      	str	r3, [r7, #20]
                          |PYRO_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4828      	ldr	r0, [pc, #160]	; (8000d84 <MX_GPIO_Init+0x164>)
 8000ce4:	f000 ffa2 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_INT_TELE_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI3_INT_TELE_GPIO_Pin;
 8000ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI3_INT_TELE_GPIO_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4821      	ldr	r0, [pc, #132]	; (8000d84 <MX_GPIO_Init+0x164>)
 8000d00:	f000 ff94 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_MMC_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_MMC_GPIO_Pin;
 8000d04:	2310      	movs	r3, #16
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_MMC_GPIO_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	481c      	ldr	r0, [pc, #112]	; (8000d8c <MX_GPIO_Init+0x16c>)
 8000d1a:	f000 ff87 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_MS5_GPIO_Pin SPI1_CS_MMC_GPIO_Pin PYRO_A_Pin PYRO_B_Pin
                           PYRO_C_Pin PYRO_D_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_MS5_GPIO_Pin|SPI1_CS_MMC_GPIO_Pin|PYRO_A_Pin|PYRO_B_Pin
 8000d1e:	f24f 0303 	movw	r3, #61443	; 0xf003
 8000d22:	617b      	str	r3, [r7, #20]
                          |PYRO_C_Pin|PYRO_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4814      	ldr	r0, [pc, #80]	; (8000d88 <MX_GPIO_Init+0x168>)
 8000d38:	f000 ff78 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_INT_ICM_GPIO_Pin SPI1_INT_H3L_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_ICM_GPIO_Pin|SPI1_INT_H3L_GPIO_Pin;
 8000d3c:	f240 4304 	movw	r3, #1028	; 0x404
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_GPIO_Init+0x168>)
 8000d54:	f000 ff6a 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_FLASH_CS_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI3_FLASH_CS_GPIO_Pin;
 8000d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_FLASH_CS_GPIO_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_GPIO_Init+0x16c>)
 8000d72:	f000 ff5b 	bl	8001c2c <HAL_GPIO_Init>

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020000 	.word	0x40020000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <HAL_ADC_MspInit+0xb0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d141      	bne.n	8000e92 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_ADC_MspInit+0xb4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = PYRO_SENSE_F_Pin|PYRO_SENSE_E_Pin|PYRO_SENSE_D_Pin|PYRO_SENSE_C_Pin;
 8000e62:	230f      	movs	r3, #15
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e66:	2303      	movs	r3, #3
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <HAL_ADC_MspInit+0xb8>)
 8000e76:	f000 fed9 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PYRO_SENSE_B_Pin|PYRO_SENSE_A_Pin|BAT_PYRO_VOLT_Pin|BAT_SYS_VOLT_Pin;
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <HAL_ADC_MspInit+0xbc>)
 8000e8e:	f000 fecd 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012000 	.word	0x40012000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020000 	.word	0x40020000

08000eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <HAL_I2C_MspInit+0xc4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d14b      	bne.n	8000f66 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0c:	2312      	movs	r3, #18
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4815      	ldr	r0, [pc, #84]	; (8000f78 <HAL_I2C_MspInit+0xcc>)
 8000f24:	f000 fe82 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2e:	2312      	movs	r3, #18
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <HAL_I2C_MspInit+0xd0>)
 8000f46:	f000 fe71 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_I2C_MspInit+0xc8>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40005c00 	.word	0x40005c00
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a32      	ldr	r2, [pc, #200]	; (8001068 <HAL_SPI_MspInit+0xe8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12c      	bne.n	8000ffc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_SPI_MspInit+0xec>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a30      	ldr	r2, [pc, #192]	; (800106c <HAL_SPI_MspInit+0xec>)
 8000fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <HAL_SPI_MspInit+0xec>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HAL_SPI_MspInit+0xec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a29      	ldr	r2, [pc, #164]	; (800106c <HAL_SPI_MspInit+0xec>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_SPI_MspInit+0xec>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_SENS_Pin|SPI1_MISO_SENS_Pin|SPI1_MOSI_SENS_Pin;
 8000fda:	23e0      	movs	r3, #224	; 0xe0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fea:	2305      	movs	r3, #5
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481e      	ldr	r0, [pc, #120]	; (8001070 <HAL_SPI_MspInit+0xf0>)
 8000ff6:	f000 fe19 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ffa:	e031      	b.n	8001060 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_SPI_MspInit+0xf4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12c      	bne.n	8001060 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_SPI_MspInit+0xec>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_SPI_MspInit+0xec>)
 8001010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_SPI_MspInit+0xec>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_SPI_MspInit+0xec>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_SPI_MspInit+0xec>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_SPI_MspInit+0xec>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI3_SCK_FLASH_Pin|SPI3_MISO_FLASH_Pin|SPI3_MOSI_FLASH_Pin;
 800103e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001050:	2306      	movs	r3, #6
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <HAL_SPI_MspInit+0xf8>)
 800105c:	f000 fde6 	bl	8001c2c <HAL_GPIO_Init>
}
 8001060:	bf00      	nop
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40013000 	.word	0x40013000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	40003c00 	.word	0x40003c00
 8001078:	40020800 	.word	0x40020800

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800108c:	d10e      	bne.n	80010ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010aa:	e026      	b.n	80010fa <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a16      	ldr	r2, [pc, #88]	; (800110c <HAL_TIM_Base_MspInit+0x90>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10e      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
}
 80010d2:	e012      	b.n	80010fa <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_TIM_Base_MspInit+0x94>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10d      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_TIM_Base_MspInit+0x8c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
}
 80010fa:	bf00      	nop
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40000400 	.word	0x40000400
 8001110:	40000800 	.word	0x40000800

08001114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001134:	d11e      	bne.n	8001174 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a33      	ldr	r2, [pc, #204]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_BUZZER_Pin;
 8001152:	2308      	movs	r3, #8
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001162:	2301      	movs	r3, #1
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4828      	ldr	r0, [pc, #160]	; (8001210 <HAL_TIM_MspPostInit+0xfc>)
 800116e:	f000 fd5d 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001172:	e047      	b.n	8001204 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a26      	ldr	r2, [pc, #152]	; (8001214 <HAL_TIM_MspPostInit+0x100>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d11e      	bne.n	80011bc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_LED_BLUE_Pin|TIM3_LED_GREEN_Pin;
 800119a:	2330      	movs	r3, #48	; 0x30
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011aa:	2302      	movs	r3, #2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4816      	ldr	r0, [pc, #88]	; (8001210 <HAL_TIM_MspPostInit+0xfc>)
 80011b6:	f000 fd39 	bl	8001c2c <HAL_GPIO_Init>
}
 80011ba:	e023      	b.n	8001204 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <HAL_TIM_MspPostInit+0x104>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d11e      	bne.n	8001204 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_TIM_MspPostInit+0xf8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH1_PWM_Pin|TIM4_CH2_PWM_Pin|TIM4_CH3_PWM_Pin|TIM4_CH4_PWM_Pin;
 80011e2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011f4:	2302      	movs	r3, #2
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <HAL_TIM_MspPostInit+0xfc>)
 8001200:	f000 fd14 	bl	8001c2c <HAL_GPIO_Init>
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40020400 	.word	0x40020400
 8001214:	40000400 	.word	0x40000400
 8001218:	40000800 	.word	0x40000800

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_UART_MspInit+0xe8>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12d      	bne.n	800129a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_UART_MspInit+0xec>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_UART_MspInit+0xec>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8001276:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001288:	2307      	movs	r3, #7
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	481e      	ldr	r0, [pc, #120]	; (800130c <HAL_UART_MspInit+0xf0>)
 8001294:	f000 fcca 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001298:	e030      	b.n	80012fc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <HAL_UART_MspInit+0xf4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d12b      	bne.n	80012fc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	4a16      	ldr	r2, [pc, #88]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6453      	str	r3, [r2, #68]	; 0x44
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_UART_MspInit+0xec>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_TELEMETRY_Pin|USART6_RX_TELEMETRY_Pin;
 80012dc:	23c0      	movs	r3, #192	; 0xc0
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012ec:	2308      	movs	r3, #8
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <HAL_UART_MspInit+0xf8>)
 80012f8:	f000 fc98 	bl	8001c2c <HAL_GPIO_Init>
}
 80012fc:	bf00      	nop
 80012fe:	3730      	adds	r7, #48	; 0x30
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40011000 	.word	0x40011000
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40011400 	.word	0x40011400
 8001314:	40020800 	.word	0x40020800

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f89a 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <OTG_FS_IRQHandler+0x10>)
 8001372:	f001 f8a4 	bl	80024be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200018b8 	.word	0x200018b8

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013aa:	490e      	ldr	r1, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c0:	4c0b      	ldr	r4, [pc, #44]	; (80013f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ce:	f7ff ffd7 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f008 fef5 	bl	800a1c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff f897 	bl	8000508 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80013e8:	0800a2a0 	.word	0x0800a2a0
  ldr r2, =_sbss
 80013ec:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80013f0:	20001fe4 	.word	0x20001fe4

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 fbc1 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fcb6 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fbd9 	bl	8001c12 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001478:	f000 fba1 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000008 	.word	0x20000008
 8001498:	20000004 	.word	0x20000004

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008
 80014c0:	200003d4 	.word	0x200003d4

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200003d4 	.word	0x200003d4

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008

08001524 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e033      	b.n	80015a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fc52 	bl	8000dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800156a:	f023 0302 	bic.w	r3, r3, #2
 800156e:	f043 0202 	orr.w	r2, r3, #2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f94a 	bl	8001810 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
 8001592:	e001      	b.n	8001598 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e113      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x244>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d925      	bls.n	8001624 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68d9      	ldr	r1, [r3, #12]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	3b1e      	subs	r3, #30
 80015ee:	2207      	movs	r2, #7
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43da      	mvns	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	400a      	ands	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68d9      	ldr	r1, [r3, #12]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	4603      	mov	r3, r0
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4403      	add	r3, r0
 8001616:	3b1e      	subs	r3, #30
 8001618:	409a      	lsls	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	e022      	b.n	800166a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	2207      	movs	r2, #7
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	400a      	ands	r2, r1
 8001646:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	4603      	mov	r3, r0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4403      	add	r3, r0
 8001660:	409a      	lsls	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b06      	cmp	r3, #6
 8001670:	d824      	bhi.n	80016bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	3b05      	subs	r3, #5
 8001684:	221f      	movs	r2, #31
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	400a      	ands	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b05      	subs	r3, #5
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ba:	e04c      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d824      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b23      	subs	r3, #35	; 0x23
 80016d6:	221f      	movs	r2, #31
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43da      	mvns	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	400a      	ands	r2, r1
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b23      	subs	r3, #35	; 0x23
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
 800170c:	e023      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b41      	subs	r3, #65	; 0x41
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	400a      	ands	r2, r1
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	; 0x41
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_ADC_ConfigChannel+0x250>)
 8001758:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a28      	ldr	r2, [pc, #160]	; (8001800 <HAL_ADC_ConfigChannel+0x254>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d10f      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1d8>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d10b      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_ADC_ConfigChannel+0x254>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12b      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x23a>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_ADC_ConfigChannel+0x258>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d003      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0x1f4>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b11      	cmp	r3, #17
 800179e:	d122      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_ADC_ConfigChannel+0x258>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d111      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_ADC_ConfigChannel+0x25c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_ADC_ConfigChannel+0x260>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9a      	lsrs	r2, r3, #18
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d8:	e002      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f9      	bne.n	80017da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40012300 	.word	0x40012300
 8001800:	40012000 	.word	0x40012000
 8001804:	10000012 	.word	0x10000012
 8001808:	20000000 	.word	0x20000000
 800180c:	431bde83 	.word	0x431bde83

08001810 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001818:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <ADC_Init+0x1f0>)
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	021a      	lsls	r2, r3, #8
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800188a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <ADC_Init+0x1f4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d022      	beq.n	80018ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6899      	ldr	r1, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e00f      	b.n	800190e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800190c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0202 	bic.w	r2, r2, #2
 800191c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e1b      	ldrb	r3, [r3, #24]
 8001928:	005a      	lsls	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01b      	beq.n	8001974 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800194a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800195a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	3b01      	subs	r3, #1
 8001968:	035a      	lsls	r2, r3, #13
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	e007      	b.n	8001984 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001982:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	3b01      	subs	r3, #1
 80019a0:	051a      	lsls	r2, r3, #20
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019c6:	025a      	lsls	r2, r3, #9
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6899      	ldr	r1, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	029a      	lsls	r2, r3, #10
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40012300 	.word	0x40012300
 8001a04:	0f000001 	.word	0x0f000001

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <__NVIC_EnableIRQ+0x38>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff29 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff3e 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff31 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa2 	bl	8001b64 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e165      	b.n	8001f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8154 	bne.w	8001f0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80ae 	beq.w	8001f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a5c      	ldr	r2, [pc, #368]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4f      	ldr	r2, [pc, #316]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4e      	ldr	r2, [pc, #312]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_GPIO_Init+0x314>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_GPIO_Init+0x318>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x20a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <HAL_GPIO_Init+0x31c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a49      	ldr	r2, [pc, #292]	; (8001f4c <HAL_GPIO_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x202>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00c      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00a      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e58:	4935      	ldr	r1, [pc, #212]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e8a:	4a31      	ldr	r2, [pc, #196]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f ae96 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e12b      	b.n	80021f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe ff7c 	bl	8000eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	; 0x24
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fec:	f001 fd1c 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8001ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4a81      	ldr	r2, [pc, #516]	; (80021fc <HAL_I2C_Init+0x274>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d807      	bhi.n	800200c <HAL_I2C_Init+0x84>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a80      	ldr	r2, [pc, #512]	; (8002200 <HAL_I2C_Init+0x278>)
 8002000:	4293      	cmp	r3, r2
 8002002:	bf94      	ite	ls
 8002004:	2301      	movls	r3, #1
 8002006:	2300      	movhi	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e006      	b.n	800201a <HAL_I2C_Init+0x92>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a7d      	ldr	r2, [pc, #500]	; (8002204 <HAL_I2C_Init+0x27c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	bf94      	ite	ls
 8002014:	2301      	movls	r3, #1
 8002016:	2300      	movhi	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0e7      	b.n	80021f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4a78      	ldr	r2, [pc, #480]	; (8002208 <HAL_I2C_Init+0x280>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0c9b      	lsrs	r3, r3, #18
 800202c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a6a      	ldr	r2, [pc, #424]	; (80021fc <HAL_I2C_Init+0x274>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d802      	bhi.n	800205c <HAL_I2C_Init+0xd4>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3301      	adds	r3, #1
 800205a:	e009      	b.n	8002070 <HAL_I2C_Init+0xe8>
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	4a69      	ldr	r2, [pc, #420]	; (800220c <HAL_I2C_Init+0x284>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	3301      	adds	r3, #1
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	430b      	orrs	r3, r1
 8002076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002082:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	495c      	ldr	r1, [pc, #368]	; (80021fc <HAL_I2C_Init+0x274>)
 800208c:	428b      	cmp	r3, r1
 800208e:	d819      	bhi.n	80020c4 <HAL_I2C_Init+0x13c>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1e59      	subs	r1, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fbb1 f3f3 	udiv	r3, r1, r3
 800209e:	1c59      	adds	r1, r3, #1
 80020a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020a4:	400b      	ands	r3, r1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_I2C_Init+0x138>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e59      	subs	r1, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020be:	e051      	b.n	8002164 <HAL_I2C_Init+0x1dc>
 80020c0:	2304      	movs	r3, #4
 80020c2:	e04f      	b.n	8002164 <HAL_I2C_Init+0x1dc>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d111      	bne.n	80020f0 <HAL_I2C_Init+0x168>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e012      	b.n	8002116 <HAL_I2C_Init+0x18e>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e58      	subs	r0, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	0099      	lsls	r1, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	fbb0 f3f3 	udiv	r3, r0, r3
 8002106:	3301      	adds	r3, #1
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Init+0x196>
 800211a:	2301      	movs	r3, #1
 800211c:	e022      	b.n	8002164 <HAL_I2C_Init+0x1dc>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10e      	bne.n	8002144 <HAL_I2C_Init+0x1bc>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1e58      	subs	r0, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6859      	ldr	r1, [r3, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	440b      	add	r3, r1
 8002134:	fbb0 f3f3 	udiv	r3, r0, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002142:	e00f      	b.n	8002164 <HAL_I2C_Init+0x1dc>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	0099      	lsls	r1, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	6809      	ldr	r1, [r1, #0]
 8002168:	4313      	orrs	r3, r2
 800216a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69da      	ldr	r2, [r3, #28]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002192:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6911      	ldr	r1, [r2, #16]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68d2      	ldr	r2, [r2, #12]
 800219e:	4311      	orrs	r1, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	000186a0 	.word	0x000186a0
 8002200:	001e847f 	.word	0x001e847f
 8002204:	003d08ff 	.word	0x003d08ff
 8002208:	431bde83 	.word	0x431bde83
 800220c:	10624dd3 	.word	0x10624dd3

08002210 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	b08f      	sub	sp, #60	; 0x3c
 8002214:	af0a      	add	r7, sp, #40	; 0x28
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e116      	b.n	8002450 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f007 fc3b 	bl	8009ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 ff58 	bl	8006116 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	687e      	ldr	r6, [r7, #4]
 800226e:	466d      	mov	r5, sp
 8002270:	f106 0410 	add.w	r4, r6, #16
 8002274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002280:	e885 0003 	stmia.w	r5, {r0, r1}
 8002284:	1d33      	adds	r3, r6, #4
 8002286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	f003 fe2f 	bl	8005eec <USB_CoreInit>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d7      	b.n	8002450 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 ff46 	bl	8006138 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e04a      	b.n	8002348 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333d      	adds	r3, #61	; 0x3d
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	333c      	adds	r3, #60	; 0x3c
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	b298      	uxth	r0, r3
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3344      	adds	r3, #68	; 0x44
 80022ee:	4602      	mov	r2, r0
 80022f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3340      	adds	r3, #64	; 0x40
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3348      	adds	r3, #72	; 0x48
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	334c      	adds	r3, #76	; 0x4c
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3354      	adds	r3, #84	; 0x54
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	3301      	adds	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3af      	bcc.n	80022b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e044      	b.n	80023e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	3301      	adds	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3b5      	bcc.n	8002358 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	687e      	ldr	r6, [r7, #4]
 80023f4:	466d      	mov	r5, sp
 80023f6:	f106 0410 	add.w	r4, r6, #16
 80023fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002406:	e885 0003 	stmia.w	r5, {r0, r1}
 800240a:	1d33      	adds	r3, r6, #4
 800240c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	f003 fede 	bl	80061d0 <USB_DevInit>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e014      	b.n	8002450 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b01      	cmp	r3, #1
 800243c:	d102      	bne.n	8002444 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f001 f98c 	bl	800375c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f005 f820 	bl	800748e <USB_DevDisconnect>

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002458 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_PCD_Start+0x1c>
 8002470:	2302      	movs	r3, #2
 8002472:	e020      	b.n	80024b6 <HAL_PCD_Start+0x5e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	2b01      	cmp	r3, #1
 8002482:	d109      	bne.n	8002498 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002488:	2b01      	cmp	r3, #1
 800248a:	d005      	beq.n	8002498 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fe29 	bl	80060f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 ffd0 	bl	800744c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024be:	b590      	push	{r4, r7, lr}
 80024c0:	b08d      	sub	sp, #52	; 0x34
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f005 f88e 	bl	80075f6 <USB_GetMode>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 84b7 	bne.w	8002e50 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 fff2 	bl	80074d0 <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 84ad 	beq.w	8002e4e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f004 ffdf 	bl	80074d0 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b02      	cmp	r3, #2
 800251a:	d107      	bne.n	800252c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f002 0202 	and.w	r2, r2, #2
 800252a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f004 ffcd 	bl	80074d0 <USB_ReadInterrupts>
 8002536:	4603      	mov	r3, r0
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b10      	cmp	r3, #16
 800253e:	d161      	bne.n	8002604 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0210 	bic.w	r2, r2, #16
 800254e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f003 020f 	and.w	r2, r3, #15
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	3304      	adds	r3, #4
 800256e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	0c5b      	lsrs	r3, r3, #17
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2b02      	cmp	r3, #2
 800257a:	d124      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d035      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	6a38      	ldr	r0, [r7, #32]
 800259c:	f004 fe04 	bl	80071a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ac:	441a      	add	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6a1a      	ldr	r2, [r3, #32]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025be:	441a      	add	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	621a      	str	r2, [r3, #32]
 80025c4:	e016      	b.n	80025f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	0c5b      	lsrs	r3, r3, #17
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d110      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025d8:	2208      	movs	r2, #8
 80025da:	4619      	mov	r1, r3
 80025dc:	6a38      	ldr	r0, [r7, #32]
 80025de:	f004 fde3 	bl	80071a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ee:	441a      	add	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0210 	orr.w	r2, r2, #16
 8002602:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f004 ff61 	bl	80074d0 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002614:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002618:	f040 80a7 	bne.w	800276a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f004 ff66 	bl	80074f6 <USB_ReadDevAllOutEpInterrupt>
 800262a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800262c:	e099      	b.n	8002762 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 808e 	beq.w	8002756 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f004 ff8a 	bl	800755e <USB_ReadDevOutEPInterrupt>
 800264a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00c      	beq.n	8002670 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002662:	461a      	mov	r2, r3
 8002664:	2301      	movs	r3, #1
 8002666:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fef0 	bl	8003450 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002686:	461a      	mov	r2, r3
 8002688:	2308      	movs	r3, #8
 800268a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800268c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 ffc6 	bl	8003620 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026aa:	461a      	mov	r2, r3
 80026ac:	2310      	movs	r3, #16
 80026ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d030      	beq.n	800271c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b80      	cmp	r3, #128	; 0x80
 80026c4:	d109      	bne.n	80026da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	3304      	adds	r3, #4
 80026ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	78db      	ldrb	r3, [r3, #3]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2200      	movs	r2, #0
 80026fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f007 faff 	bl	8009d08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002716:	461a      	mov	r2, r3
 8002718:	2302      	movs	r3, #2
 800271a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002732:	461a      	mov	r2, r3
 8002734:	2320      	movs	r3, #32
 8002736:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274e:	461a      	mov	r2, r3
 8002750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002754:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	3301      	adds	r3, #1
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	f47f af62 	bne.w	800262e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f004 feae 	bl	80074d0 <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800277e:	f040 80db 	bne.w	8002938 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f004 fecf 	bl	800752a <USB_ReadDevAllInEpInterrupt>
 800278c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002792:	e0cd      	b.n	8002930 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80c2 	beq.w	8002924 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fef5 	bl	800759a <USB_ReadDevInEPInterrupt>
 80027b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d057      	beq.n	800286c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	2201      	movs	r2, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69f9      	ldr	r1, [r7, #28]
 80027d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027dc:	4013      	ands	r3, r2
 80027de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ec:	461a      	mov	r2, r3
 80027ee:	2301      	movs	r3, #1
 80027f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d132      	bne.n	8002860 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	334c      	adds	r3, #76	; 0x4c
 800280a:	6819      	ldr	r1, [r3, #0]
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4403      	add	r3, r0
 800281a:	3348      	adds	r3, #72	; 0x48
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4419      	add	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4403      	add	r3, r0
 800282e:	334c      	adds	r3, #76	; 0x4c
 8002830:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	d113      	bne.n	8002860 <HAL_PCD_IRQHandler+0x3a2>
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3354      	adds	r3, #84	; 0x54
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d108      	bne.n	8002860 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002858:	461a      	mov	r2, r3
 800285a:	2101      	movs	r1, #1
 800285c:	f004 fefc 	bl	8007658 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f007 f9c9 	bl	8009bfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002882:	461a      	mov	r2, r3
 8002884:	2308      	movs	r3, #8
 8002886:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289e:	461a      	mov	r2, r3
 80028a0:	2310      	movs	r3, #16
 80028a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ba:	461a      	mov	r2, r3
 80028bc:	2340      	movs	r3, #64	; 0x40
 80028be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d023      	beq.n	8002912 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028cc:	6a38      	ldr	r0, [r7, #32]
 80028ce:	f003 fddd 	bl	800648c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	3338      	adds	r3, #56	; 0x38
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	3304      	adds	r3, #4
 80028e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	78db      	ldrb	r3, [r3, #3]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d108      	bne.n	8002900 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f007 fa16 	bl	8009d2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290c:	461a      	mov	r2, r3
 800290e:	2302      	movs	r3, #2
 8002910:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800291c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fd08 	bl	8003334 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3301      	adds	r3, #1
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	f47f af2e 	bne.w	8002794 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fdc7 	bl	80074d0 <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800294c:	d122      	bne.n	8002994 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002968:	2b01      	cmp	r3, #1
 800296a:	d108      	bne.n	800297e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002974:	2100      	movs	r1, #0
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f007 fb90 	bl	800a09c <HAL_PCDEx_LPM_Callback>
 800297c:	e002      	b.n	8002984 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f007 f9b4 	bl	8009cec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fd99 	bl	80074d0 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a8:	d112      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d102      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f007 f970 	bl	8009ca0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029ce:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 fd7b 	bl	80074d0 <USB_ReadInterrupts>
 80029da:	4603      	mov	r3, r0
 80029dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e4:	d121      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80029f4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f007 fb3d 	bl	800a09c <HAL_PCDEx_LPM_Callback>
 8002a22:	e002      	b.n	8002a2a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f007 f93b 	bl	8009ca0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 fd4e 	bl	80074d0 <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	f040 80b7 	bne.w	8002bb0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 fd15 	bl	800648c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a66:	e046      	b.n	8002af6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a74:	461a      	mov	r2, r3
 8002a76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a7a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac0:	0151      	lsls	r1, r2, #5
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002aca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ace:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae0:	0151      	lsls	r1, r2, #5
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	440a      	add	r2, r1
 8002ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002aee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	3301      	adds	r3, #1
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3b3      	bcc.n	8002a68 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d016      	beq.n	8002b4a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b2c:	f043 030b 	orr.w	r3, r3, #11
 8002b30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b42:	f043 030b 	orr.w	r3, r3, #11
 8002b46:	6453      	str	r3, [r2, #68]	; 0x44
 8002b48:	e015      	b.n	8002b76 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b5c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b70:	f043 030b 	orr.w	r3, r3, #11
 8002b74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f004 fd5c 	bl	8007658 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f004 fc8b 	bl	80074d0 <USB_ReadInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc4:	d124      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 fd21 	bl	8007612 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fcd6 	bl	8006586 <USB_GetDevSpeed>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681c      	ldr	r4, [r3, #0]
 8002be6:	f000 ff13 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8002bea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f003 f9db 	bl	8005fb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f007 f827 	bl	8009c4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 fc5b 	bl	80074d0 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d10a      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f007 f804 	bl	8009c32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f002 0208 	and.w	r2, r2, #8
 8002c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 fc46 	bl	80074d0 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	2b80      	cmp	r3, #128	; 0x80
 8002c4c:	d122      	bne.n	8002c94 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e014      	b.n	8002c8a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fb27 	bl	80032d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	3301      	adds	r3, #1
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3e5      	bcc.n	8002c60 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 fc19 	bl	80074d0 <USB_ReadInterrupts>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca8:	d13b      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002caa:	2301      	movs	r3, #1
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	e02b      	b.n	8002d08 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3340      	adds	r3, #64	; 0x40
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d115      	bne.n	8002d02 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da12      	bge.n	8002d02 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	333f      	adds	r3, #63	; 0x3f
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fae8 	bl	80032d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	3301      	adds	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3ce      	bcc.n	8002cb0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fbd2 	bl	80074d0 <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d36:	d155      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d38:	2301      	movs	r3, #1
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	e045      	b.n	8002dca <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d12e      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da2b      	bge.n	8002dc4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d121      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc0:	6053      	str	r3, [r2, #4]
            break;
 8002dc2:	e007      	b.n	8002dd4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d3b4      	bcc.n	8002d3e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f004 fb71 	bl	80074d0 <USB_ReadInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d10a      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f006 ffa8 	bl	8009d50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 fb5b 	bl	80074d0 <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d115      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f006 ff98 	bl	8009d6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	e000      	b.n	8002e50 <HAL_PCD_IRQHandler+0x992>
      return;
 8002e4e:	bf00      	nop
    }
  }
}
 8002e50:	3734      	adds	r7, #52	; 0x34
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd90      	pop	{r4, r7, pc}

08002e56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_PCD_SetAddress+0x1a>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e013      	b.n	8002e98 <HAL_PCD_SetAddress+0x42>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f004 fab9 	bl	8007400 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	70fb      	strb	r3, [r7, #3]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	803b      	strh	r3, [r7, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	da0f      	bge.n	8002ee6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	f003 020f 	and.w	r2, r3, #15
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	3338      	adds	r3, #56	; 0x38
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	3304      	adds	r3, #4
 8002edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	705a      	strb	r2, [r3, #1]
 8002ee4:	e00f      	b.n	8002f06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f12:	883a      	ldrh	r2, [r7, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	78ba      	ldrb	r2, [r7, #2]
 8002f1c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	785b      	ldrb	r3, [r3, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f30:	78bb      	ldrb	r3, [r7, #2]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d102      	bne.n	8002f3c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_PCD_EP_Open+0xaa>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e00e      	b.n	8002f68 <HAL_PCD_EP_Open+0xc8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fb39 	bl	80065d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f66:	7afb      	ldrb	r3, [r7, #11]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da0f      	bge.n	8002fa4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 020f 	and.w	r2, r3, #15
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	3338      	adds	r3, #56	; 0x38
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	3304      	adds	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	705a      	strb	r2, [r3, #1]
 8002fa2:	e00f      	b.n	8002fc4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	f003 020f 	and.w	r2, r3, #15
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_PCD_EP_Close+0x6e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e00e      	b.n	8002ffc <HAL_PCD_EP_Close+0x8c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f003 fb77 	bl	80066e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	460b      	mov	r3, r1
 8003012:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003014:	7afb      	ldrb	r3, [r7, #11]
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4413      	add	r3, r2
 800302a:	3304      	adds	r3, #4
 800302c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	b2da      	uxtb	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	6979      	ldr	r1, [r7, #20]
 8003078:	f003 fe56 	bl	8006d28 <USB_EP0StartXfer>
 800307c:	e008      	b.n	8003090 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	6979      	ldr	r1, [r7, #20]
 800308c:	f003 fc04 	bl	8006898 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 020f 	and.w	r2, r3, #15
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80030bc:	681b      	ldr	r3, [r3, #0]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	460b      	mov	r3, r1
 80030d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030da:	7afb      	ldrb	r3, [r7, #11]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	3338      	adds	r3, #56	; 0x38
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	3304      	adds	r3, #4
 80030f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2201      	movs	r2, #1
 8003108:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	b2da      	uxtb	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003124:	7afb      	ldrb	r3, [r7, #11]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	f003 fdf4 	bl	8006d28 <USB_EP0StartXfer>
 8003140:	e008      	b.n	8003154 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	6979      	ldr	r1, [r7, #20]
 8003150:	f003 fba2 	bl	8006898 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d901      	bls.n	800317c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e050      	b.n	800321e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800317c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003180:	2b00      	cmp	r3, #0
 8003182:	da0f      	bge.n	80031a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	3338      	adds	r3, #56	; 0x38
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	705a      	strb	r2, [r3, #1]
 80031a2:	e00d      	b.n	80031c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_PCD_EP_SetStall+0x82>
 80031dc:	2302      	movs	r3, #2
 80031de:	e01e      	b.n	800321e <HAL_PCD_EP_SetStall+0xc0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 f832 	bl	8007258 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	b2d9      	uxtb	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800320e:	461a      	mov	r2, r3
 8003210:	f004 fa22 	bl	8007658 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 020f 	and.w	r2, r3, #15
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d901      	bls.n	8003244 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e042      	b.n	80032ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003248:	2b00      	cmp	r3, #0
 800324a:	da0f      	bge.n	800326c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 020f 	and.w	r2, r3, #15
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	3338      	adds	r3, #56	; 0x38
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	705a      	strb	r2, [r3, #1]
 800326a:	e00f      	b.n	800328c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_PCD_EP_ClrStall+0x86>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e00e      	b.n	80032ca <HAL_PCD_EP_ClrStall+0xa4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68f9      	ldr	r1, [r7, #12]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f004 f83a 	bl	8007334 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	da0c      	bge.n	8003300 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	3338      	adds	r3, #56	; 0x38
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	3304      	adds	r3, #4
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	e00c      	b.n	800331a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fe59 	bl	8006fd8 <USB_EPStopXfer>
 8003326:	4603      	mov	r3, r0
 8003328:	72fb      	strb	r3, [r7, #11]

  return ret;
 800332a:	7afb      	ldrb	r3, [r7, #11]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af02      	add	r7, sp, #8
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	3338      	adds	r3, #56	; 0x38
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	3304      	adds	r3, #4
 800335a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	429a      	cmp	r2, r3
 8003366:	d901      	bls.n	800336c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e06c      	b.n	8003446 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	429a      	cmp	r2, r3
 8003380:	d902      	bls.n	8003388 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	3303      	adds	r3, #3
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003390:	e02b      	b.n	80033ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d902      	bls.n	80033ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3303      	adds	r3, #3
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6919      	ldr	r1, [r3, #16]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	4603      	mov	r3, r0
 80033cc:	6978      	ldr	r0, [r7, #20]
 80033ce:	f003 fead 	bl	800712c <USB_WritePacket>

    ep->xfer_buff  += len;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	441a      	add	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1a      	ldr	r2, [r3, #32]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d809      	bhi.n	8003414 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1a      	ldr	r2, [r3, #32]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003408:	429a      	cmp	r2, r3
 800340a:	d203      	bcs.n	8003414 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1be      	bne.n	8003392 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	429a      	cmp	r2, r3
 800341e:	d811      	bhi.n	8003444 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	2201      	movs	r2, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	43db      	mvns	r3, r3
 800343a:	6939      	ldr	r1, [r7, #16]
 800343c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003440:	4013      	ands	r3, r2
 8003442:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	333c      	adds	r3, #60	; 0x3c
 8003468:	3304      	adds	r3, #4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d17b      	bne.n	800357e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	4a61      	ldr	r2, [pc, #388]	; (8003618 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	f240 80b9 	bls.w	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80b3 	beq.w	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b2:	461a      	mov	r2, r3
 80034b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b8:	6093      	str	r3, [r2, #8]
 80034ba:	e0a7      	b.n	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	2320      	movs	r3, #32
 80034d6:	6093      	str	r3, [r2, #8]
 80034d8:	e098      	b.n	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f040 8093 	bne.w	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d90f      	bls.n	800350e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003504:	461a      	mov	r2, r3
 8003506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	e07e      	b.n	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	3304      	adds	r3, #4
 8003522:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	440b      	add	r3, r1
 8003530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	1ad2      	subs	r2, r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d114      	bne.n	8003570 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003558:	461a      	mov	r2, r3
 800355a:	2101      	movs	r1, #1
 800355c:	f004 f87c 	bl	8007658 <USB_EP0_OutStart>
 8003560:	e006      	b.n	8003570 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	441a      	add	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f006 fb26 	bl	8009bc8 <HAL_PCD_DataOutStageCallback>
 800357c:	e046      	b.n	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d124      	bne.n	80035d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359c:	461a      	mov	r2, r3
 800359e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a2:	6093      	str	r3, [r2, #8]
 80035a4:	e032      	b.n	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	2320      	movs	r3, #32
 80035c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f006 fafd 	bl	8009bc8 <HAL_PCD_DataOutStageCallback>
 80035ce:	e01d      	b.n	800360c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d114      	bne.n	8003600 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d108      	bne.n	8003600 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035f8:	461a      	mov	r2, r3
 80035fa:	2100      	movs	r1, #0
 80035fc:	f004 f82c 	bl	8007658 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f006 fade 	bl	8009bc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	4f54300a 	.word	0x4f54300a
 800361c:	4f54310a 	.word	0x4f54310a

08003620 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	333c      	adds	r3, #60	; 0x3c
 8003638:	3304      	adds	r3, #4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d90e      	bls.n	8003674 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366c:	461a      	mov	r2, r3
 800366e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003672:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f006 fa95 	bl	8009ba4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d90c      	bls.n	800369c <PCD_EP_OutSetupPacket_int+0x7c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d108      	bne.n	800369c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003694:	461a      	mov	r2, r3
 8003696:	2101      	movs	r1, #1
 8003698:	f003 ffde 	bl	8007658 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	4f54300a 	.word	0x4f54300a

080036ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
 80036b8:	4613      	mov	r3, r2
 80036ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036ca:	883b      	ldrh	r3, [r7, #0]
 80036cc:	0419      	lsls	r1, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
 80036d8:	e028      	b.n	800372c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4413      	add	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]
 80036ec:	e00d      	b.n	800370a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	3340      	adds	r3, #64	; 0x40
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	4413      	add	r3, r2
 8003702:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	3301      	adds	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	3b01      	subs	r3, #1
 8003710:	429a      	cmp	r2, r3
 8003712:	d3ec      	bcc.n	80036ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003714:	883b      	ldrh	r3, [r7, #0]
 8003716:	0418      	lsls	r0, r3, #16
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	3b01      	subs	r3, #1
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	4302      	orrs	r2, r0
 8003724:	3340      	adds	r3, #64	; 0x40
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	460b      	mov	r3, r1
 8003744:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	f043 0303 	orr.w	r3, r3, #3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_PWREx_EnableOverDrive+0x90>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_PWREx_EnableOverDrive+0x90>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_PWREx_EnableOverDrive+0x90>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_PWREx_EnableOverDrive+0x94>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d0:	f7fd fe78 	bl	80014c4 <HAL_GetTick>
 80037d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037d6:	e009      	b.n	80037ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037d8:	f7fd fe74 	bl	80014c4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e6:	d901      	bls.n	80037ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e01f      	b.n	800382c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ec:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_PWREx_EnableOverDrive+0x98>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f8:	d1ee      	bne.n	80037d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003800:	f7fd fe60 	bl	80014c4 <HAL_GetTick>
 8003804:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003806:	e009      	b.n	800381c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003808:	f7fd fe5c 	bl	80014c4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003816:	d901      	bls.n	800381c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e007      	b.n	800382c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_PWREx_EnableOverDrive+0x98>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003828:	d1ee      	bne.n	8003808 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	420e0040 	.word	0x420e0040
 800383c:	40007000 	.word	0x40007000
 8003840:	420e0044 	.word	0x420e0044

08003844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0cc      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b68      	ldr	r3, [pc, #416]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d90c      	bls.n	8003880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b65      	ldr	r3, [pc, #404]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0b8      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003898:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b0:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038bc:	4b50      	ldr	r3, [pc, #320]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	494d      	ldr	r1, [pc, #308]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d044      	beq.n	8003964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d119      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003912:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e067      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4934      	ldr	r1, [pc, #208]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fd fdc6 	bl	80014c4 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fd fdc2 	bl	80014c4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e04f      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d20c      	bcs.n	800398c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e032      	b.n	80039f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4916      	ldr	r1, [pc, #88]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	490e      	ldr	r1, [pc, #56]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ca:	f000 fb7f 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	490a      	ldr	r1, [pc, #40]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	5ccb      	ldrb	r3, [r1, r3]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd fd26 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023c00 	.word	0x40023c00
 8003a00:	40023800 	.word	0x40023800
 8003a04:	0800a278 	.word	0x0800a278
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	20000004 	.word	0x20000004

08003a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a9b      	lsrs	r3, r3, #10
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	0800a288 	.word	0x0800a288

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a54:	f7ff ffdc 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0b5b      	lsrs	r3, r3, #13
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4903      	ldr	r1, [pc, #12]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	0800a288 	.word	0x0800a288

08003a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	; 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d010      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	496c      	ldr	r1, [pc, #432]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d010      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003ade:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	4960      	ldr	r1, [pc, #384]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003afc:	2301      	movs	r3, #1
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d017      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b0c:	4b58      	ldr	r3, [pc, #352]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4955      	ldr	r1, [pc, #340]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d017      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b48:	4b49      	ldr	r3, [pc, #292]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	4946      	ldr	r1, [pc, #280]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b66:	d101      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003b74:	2301      	movs	r3, #1
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 808a 	beq.w	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	4a38      	ldr	r2, [pc, #224]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	; 0x40
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ba2:	4b34      	ldr	r3, [pc, #208]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a33      	ldr	r2, [pc, #204]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bae:	f7fd fc89 	bl	80014c4 <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fd fc85 	bl	80014c4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e278      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bd4:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bdc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d02f      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c0e:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d114      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fd fc53 	bl	80014c4 <HAL_GetTick>
 8003c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fd fc4f 	bl	80014c4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e240      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ee      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c50:	d114      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c66:	4902      	ldr	r1, [pc, #8]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]
 8003c6c:	e00c      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40007000 	.word	0x40007000
 8003c78:	42470e40 	.word	0x42470e40
 8003c7c:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a49      	ldr	r2, [pc, #292]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c86:	6093      	str	r3, [r2, #8]
 8003c88:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c94:	4944      	ldr	r1, [pc, #272]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003cac:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003cae:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	4937      	ldr	r1, [pc, #220]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cde:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	492e      	ldr	r1, [pc, #184]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d011      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d00:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d06:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	4926      	ldr	r1, [pc, #152]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003d20:	2301      	movs	r3, #1
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d30:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	491a      	ldr	r1, [pc, #104]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d011      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d58:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	4911      	ldr	r1, [pc, #68]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d70:	d101      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003d72:	2301      	movs	r3, #1
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d005      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	f040 80ff 	bne.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d8e:	f7fd fb99 	bl	80014c4 <HAL_GetTick>
 8003d92:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d94:	e00e      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d96:	f7fd fb95 	bl	80014c4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d907      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e188      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003da8:	40023800 	.word	0x40023800
 8003dac:	424711e0 	.word	0x424711e0
 8003db0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db4:	4b7e      	ldr	r3, [pc, #504]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ea      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d028      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d124      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003de8:	4b71      	ldr	r3, [pc, #452]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dee:	0c1b      	lsrs	r3, r3, #16
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	3301      	adds	r3, #1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dfa:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e00:	0e1b      	lsrs	r3, r3, #24
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	431a      	orrs	r2, r3
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	061b      	lsls	r3, r3, #24
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	071b      	lsls	r3, r3, #28
 8003e2a:	4961      	ldr	r1, [pc, #388]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d035      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5c:	d130      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e5e:	4b54      	ldr	r3, [pc, #336]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e70:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	0f1b      	lsrs	r3, r3, #28
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	019b      	lsls	r3, r3, #6
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	071b      	lsls	r3, r3, #28
 8003ea0:	4943      	ldr	r1, [pc, #268]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ea8:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eae:	f023 021f 	bic.w	r2, r3, #31
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	493d      	ldr	r1, [pc, #244]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d029      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed4:	d124      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ed6:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ee8:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eee:	0f1b      	lsrs	r3, r3, #28
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	019b      	lsls	r3, r3, #6
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	431a      	orrs	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	071b      	lsls	r3, r3, #28
 8003f18:	4925      	ldr	r1, [pc, #148]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d016      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	071b      	lsls	r3, r3, #28
 8003f52:	4917      	ldr	r1, [pc, #92]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f60:	f7fd fab0 	bl	80014c4 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f68:	f7fd faac 	bl	80014c4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e09f      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 8095 	bne.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f94:	f7fd fa96 	bl	80014c4 <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f9a:	e00f      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f9c:	f7fd fa92 	bl	80014c4 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d908      	bls.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e085      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	42470068 	.word	0x42470068
 8003fb8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fbc:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc8:	d0e8      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02b      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d127      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003ff2:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	019b      	lsls	r3, r3, #6
 800400e:	431a      	orrs	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	3b01      	subs	r3, #1
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	4928      	ldr	r1, [pc, #160]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004028:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800402a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800402e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	3b01      	subs	r3, #1
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	4922      	ldr	r1, [pc, #136]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01d      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004056:	d118      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	0e1b      	lsrs	r3, r3, #24
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	019b      	lsls	r3, r3, #6
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	3b01      	subs	r3, #1
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	4910      	ldr	r1, [pc, #64]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004090:	f7fd fa18 	bl	80014c4 <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004098:	f7fd fa14 	bl	80014c4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e007      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b6:	d1ef      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3730      	adds	r7, #48	; 0x30
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	42470070 	.word	0x42470070

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b0ae      	sub	sp, #184	; 0xb8
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f2:	4bcb      	ldr	r3, [pc, #812]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	f200 8206 	bhi.w	800450c <HAL_RCC_GetSysClockFreq+0x440>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800413d 	.word	0x0800413d
 800410c:	0800450d 	.word	0x0800450d
 8004110:	0800450d 	.word	0x0800450d
 8004114:	0800450d 	.word	0x0800450d
 8004118:	08004145 	.word	0x08004145
 800411c:	0800450d 	.word	0x0800450d
 8004120:	0800450d 	.word	0x0800450d
 8004124:	0800450d 	.word	0x0800450d
 8004128:	0800414d 	.word	0x0800414d
 800412c:	0800450d 	.word	0x0800450d
 8004130:	0800450d 	.word	0x0800450d
 8004134:	0800450d 	.word	0x0800450d
 8004138:	0800433d 	.word	0x0800433d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4bb9      	ldr	r3, [pc, #740]	; (8004424 <HAL_RCC_GetSysClockFreq+0x358>)
 800413e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004142:	e1e7      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004144:	4bb8      	ldr	r3, [pc, #736]	; (8004428 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800414a:	e1e3      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800414c:	4bb4      	ldr	r3, [pc, #720]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004158:	4bb1      	ldr	r3, [pc, #708]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d071      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004164:	4bae      	ldr	r3, [pc, #696]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	099b      	lsrs	r3, r3, #6
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004170:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	f04f 0000 	mov.w	r0, #0
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	0159      	lsls	r1, r3, #5
 8004198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419c:	0150      	lsls	r0, r2, #5
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4621      	mov	r1, r4
 80041a4:	1a51      	subs	r1, r2, r1
 80041a6:	6439      	str	r1, [r7, #64]	; 0x40
 80041a8:	4629      	mov	r1, r5
 80041aa:	eb63 0301 	sbc.w	r3, r3, r1
 80041ae:	647b      	str	r3, [r7, #68]	; 0x44
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80041bc:	4649      	mov	r1, r9
 80041be:	018b      	lsls	r3, r1, #6
 80041c0:	4641      	mov	r1, r8
 80041c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c6:	4641      	mov	r1, r8
 80041c8:	018a      	lsls	r2, r1, #6
 80041ca:	4641      	mov	r1, r8
 80041cc:	1a51      	subs	r1, r2, r1
 80041ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80041d0:	4649      	mov	r1, r9
 80041d2:	eb63 0301 	sbc.w	r3, r3, r1
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80041e4:	4649      	mov	r1, r9
 80041e6:	00cb      	lsls	r3, r1, #3
 80041e8:	4641      	mov	r1, r8
 80041ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ee:	4641      	mov	r1, r8
 80041f0:	00ca      	lsls	r2, r1, #3
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	4603      	mov	r3, r0
 80041f8:	4622      	mov	r2, r4
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
 80041fe:	462b      	mov	r3, r5
 8004200:	460a      	mov	r2, r1
 8004202:	eb42 0303 	adc.w	r3, r2, r3
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004214:	4629      	mov	r1, r5
 8004216:	024b      	lsls	r3, r1, #9
 8004218:	4621      	mov	r1, r4
 800421a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800421e:	4621      	mov	r1, r4
 8004220:	024a      	lsls	r2, r1, #9
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004234:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004238:	f7fb ffe4 	bl	8000204 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004246:	e067      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004248:	4b75      	ldr	r3, [pc, #468]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004254:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	67bb      	str	r3, [r7, #120]	; 0x78
 8004262:	2300      	movs	r3, #0
 8004264:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004266:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	f04f 0000 	mov.w	r0, #0
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	0159      	lsls	r1, r3, #5
 8004278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800427c:	0150      	lsls	r0, r2, #5
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4621      	mov	r1, r4
 8004284:	1a51      	subs	r1, r2, r1
 8004286:	62b9      	str	r1, [r7, #40]	; 0x28
 8004288:	4629      	mov	r1, r5
 800428a:	eb63 0301 	sbc.w	r3, r3, r1
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800429c:	4649      	mov	r1, r9
 800429e:	018b      	lsls	r3, r1, #6
 80042a0:	4641      	mov	r1, r8
 80042a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a6:	4641      	mov	r1, r8
 80042a8:	018a      	lsls	r2, r1, #6
 80042aa:	4641      	mov	r1, r8
 80042ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80042b0:	4649      	mov	r1, r9
 80042b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ca:	4692      	mov	sl, r2
 80042cc:	469b      	mov	fp, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	eb1a 0303 	adds.w	r3, sl, r3
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	462b      	mov	r3, r5
 80042d8:	eb4b 0303 	adc.w	r3, fp, r3
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042ea:	4629      	mov	r1, r5
 80042ec:	028b      	lsls	r3, r1, #10
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f4:	4621      	mov	r1, r4
 80042f6:	028a      	lsls	r2, r1, #10
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004300:	2200      	movs	r2, #0
 8004302:	673b      	str	r3, [r7, #112]	; 0x70
 8004304:	677a      	str	r2, [r7, #116]	; 0x74
 8004306:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800430a:	f7fb ff7b 	bl	8000204 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4613      	mov	r3, r2
 8004314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004318:	4b41      	ldr	r3, [pc, #260]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	3301      	adds	r3, #1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800432a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800432e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800433a:	e0eb      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433c:	4b38      	ldr	r3, [pc, #224]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004348:	4b35      	ldr	r3, [pc, #212]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d06b      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004354:	4b32      	ldr	r3, [pc, #200]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	2200      	movs	r2, #0
 800435c:	66bb      	str	r3, [r7, #104]	; 0x68
 800435e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	663b      	str	r3, [r7, #96]	; 0x60
 8004368:	2300      	movs	r3, #0
 800436a:	667b      	str	r3, [r7, #100]	; 0x64
 800436c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004370:	4622      	mov	r2, r4
 8004372:	462b      	mov	r3, r5
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	0159      	lsls	r1, r3, #5
 800437e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004382:	0150      	lsls	r0, r2, #5
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4621      	mov	r1, r4
 800438a:	1a51      	subs	r1, r2, r1
 800438c:	61b9      	str	r1, [r7, #24]
 800438e:	4629      	mov	r1, r5
 8004390:	eb63 0301 	sbc.w	r3, r3, r1
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043a2:	4659      	mov	r1, fp
 80043a4:	018b      	lsls	r3, r1, #6
 80043a6:	4651      	mov	r1, sl
 80043a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ac:	4651      	mov	r1, sl
 80043ae:	018a      	lsls	r2, r1, #6
 80043b0:	4651      	mov	r1, sl
 80043b2:	ebb2 0801 	subs.w	r8, r2, r1
 80043b6:	4659      	mov	r1, fp
 80043b8:	eb63 0901 	sbc.w	r9, r3, r1
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d0:	4690      	mov	r8, r2
 80043d2:	4699      	mov	r9, r3
 80043d4:	4623      	mov	r3, r4
 80043d6:	eb18 0303 	adds.w	r3, r8, r3
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	462b      	mov	r3, r5
 80043de:	eb49 0303 	adc.w	r3, r9, r3
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043f0:	4629      	mov	r1, r5
 80043f2:	024b      	lsls	r3, r1, #9
 80043f4:	4621      	mov	r1, r4
 80043f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043fa:	4621      	mov	r1, r4
 80043fc:	024a      	lsls	r2, r1, #9
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004406:	2200      	movs	r2, #0
 8004408:	65bb      	str	r3, [r7, #88]	; 0x58
 800440a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800440c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004410:	f7fb fef8 	bl	8000204 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800441e:	e065      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x420>
 8004420:	40023800 	.word	0x40023800
 8004424:	00f42400 	.word	0x00f42400
 8004428:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442c:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <HAL_RCC_GetSysClockFreq+0x458>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	2200      	movs	r2, #0
 8004434:	4618      	mov	r0, r3
 8004436:	4611      	mov	r1, r2
 8004438:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800443c:	653b      	str	r3, [r7, #80]	; 0x50
 800443e:	2300      	movs	r3, #0
 8004440:	657b      	str	r3, [r7, #84]	; 0x54
 8004442:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004446:	4642      	mov	r2, r8
 8004448:	464b      	mov	r3, r9
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	0159      	lsls	r1, r3, #5
 8004454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004458:	0150      	lsls	r0, r2, #5
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4641      	mov	r1, r8
 8004460:	1a51      	subs	r1, r2, r1
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	4649      	mov	r1, r9
 8004466:	eb63 0301 	sbc.w	r3, r3, r1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004478:	4659      	mov	r1, fp
 800447a:	018b      	lsls	r3, r1, #6
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004482:	4651      	mov	r1, sl
 8004484:	018a      	lsls	r2, r1, #6
 8004486:	4651      	mov	r1, sl
 8004488:	1a54      	subs	r4, r2, r1
 800448a:	4659      	mov	r1, fp
 800448c:	eb63 0501 	sbc.w	r5, r3, r1
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	00eb      	lsls	r3, r5, #3
 800449a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449e:	00e2      	lsls	r2, r4, #3
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	4643      	mov	r3, r8
 80044a6:	18e3      	adds	r3, r4, r3
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	464b      	mov	r3, r9
 80044ac:	eb45 0303 	adc.w	r3, r5, r3
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044be:	4629      	mov	r1, r5
 80044c0:	028b      	lsls	r3, r1, #10
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c8:	4621      	mov	r1, r4
 80044ca:	028a      	lsls	r2, r1, #10
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044d4:	2200      	movs	r2, #0
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044de:	f7fb fe91 	bl	8000204 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4613      	mov	r3, r2
 80044e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_RCC_GetSysClockFreq+0x458>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0f1b      	lsrs	r3, r3, #28
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80044fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800450a:	e003      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_RCC_GetSysClockFreq+0x45c>)
 800450e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004518:	4618      	mov	r0, r3
 800451a:	37b8      	adds	r7, #184	; 0xb8
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	00f42400 	.word	0x00f42400

0800452c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e28d      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8083 	beq.w	8004652 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800454c:	4b94      	ldr	r3, [pc, #592]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b04      	cmp	r3, #4
 8004556:	d019      	beq.n	800458c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004558:	4b91      	ldr	r3, [pc, #580]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004560:	2b08      	cmp	r3, #8
 8004562:	d106      	bne.n	8004572 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004564:	4b8e      	ldr	r3, [pc, #568]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004570:	d00c      	beq.n	800458c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004572:	4b8b      	ldr	r3, [pc, #556]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d112      	bne.n	80045a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d10b      	bne.n	80045a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	4b84      	ldr	r3, [pc, #528]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05b      	beq.n	8004650 <HAL_RCC_OscConfig+0x124>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d157      	bne.n	8004650 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e25a      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x90>
 80045ae:	4b7c      	ldr	r3, [pc, #496]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7b      	ldr	r2, [pc, #492]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0xcc>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0xb4>
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a75      	ldr	r2, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b73      	ldr	r3, [pc, #460]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a72      	ldr	r2, [pc, #456]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xcc>
 80045e0:	4b6f      	ldr	r3, [pc, #444]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a6e      	ldr	r2, [pc, #440]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b6c      	ldr	r3, [pc, #432]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6b      	ldr	r2, [pc, #428]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fc ff60 	bl	80014c4 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004608:	f7fc ff5c 	bl	80014c4 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e21f      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b61      	ldr	r3, [pc, #388]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0xdc>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fc ff4c 	bl	80014c4 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7fc ff48 	bl	80014c4 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e20b      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	4b57      	ldr	r3, [pc, #348]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x104>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d06f      	beq.n	800473e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800465e:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b00      	cmp	r3, #0
 8004668:	d017      	beq.n	800469a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800466a:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d105      	bne.n	8004682 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800468a:	2b0c      	cmp	r3, #12
 800468c:	d11c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b44      	ldr	r3, [pc, #272]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_RCC_OscConfig+0x186>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e1d3      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4937      	ldr	r1, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	e03a      	b.n	800473e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x278>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fc fef5 	bl	80014c4 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046de:	f7fc fef1 	bl	80014c4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1b4      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4925      	ldr	r1, [pc, #148]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x278>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fc fed4 	bl	80014c4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004720:	f7fc fed0 	bl	80014c4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e193      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d036      	beq.n	80047b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_RCC_OscConfig+0x27c>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fc feb4 	bl	80014c4 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004760:	f7fc feb0 	bl	80014c4 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e173      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x234>
 800477e:	e01b      	b.n	80047b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_OscConfig+0x27c>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fc fe9d 	bl	80014c4 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800478c:	e00e      	b.n	80047ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478e:	f7fc fe99 	bl	80014c4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d907      	bls.n	80047ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e15c      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
 80047a0:	40023800 	.word	0x40023800
 80047a4:	42470000 	.word	0x42470000
 80047a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	4b8a      	ldr	r3, [pc, #552]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ea      	bne.n	800478e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8097 	beq.w	80048f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b83      	ldr	r3, [pc, #524]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b7f      	ldr	r3, [pc, #508]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a7e      	ldr	r2, [pc, #504]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b7c      	ldr	r3, [pc, #496]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b79      	ldr	r3, [pc, #484]	; (80049dc <HAL_RCC_OscConfig+0x4b0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004802:	4b76      	ldr	r3, [pc, #472]	; (80049dc <HAL_RCC_OscConfig+0x4b0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a75      	ldr	r2, [pc, #468]	; (80049dc <HAL_RCC_OscConfig+0x4b0>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fc fe59 	bl	80014c4 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fc fe55 	bl	80014c4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e118      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <HAL_RCC_OscConfig+0x4b0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x31e>
 800483c:	4b66      	ldr	r3, [pc, #408]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a65      	ldr	r2, [pc, #404]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e01c      	b.n	8004884 <HAL_RCC_OscConfig+0x358>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x340>
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a60      	ldr	r2, [pc, #384]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	4b5e      	ldr	r3, [pc, #376]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a5d      	ldr	r2, [pc, #372]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0x358>
 800486c:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	4a59      	ldr	r2, [pc, #356]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
 8004878:	4b57      	ldr	r3, [pc, #348]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a56      	ldr	r2, [pc, #344]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fc fe1a 	bl	80014c4 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fc fe16 	bl	80014c4 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0d7      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048aa:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ee      	beq.n	8004894 <HAL_RCC_OscConfig+0x368>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fc fe04 	bl	80014c4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fc fe00 	bl	80014c4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0c1      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ee      	bne.n	80048c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80048ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80ad 	beq.w	8004a58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048fe:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b08      	cmp	r3, #8
 8004908:	d060      	beq.n	80049cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d145      	bne.n	800499e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <HAL_RCC_OscConfig+0x4b4>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fc fdd4 	bl	80014c4 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fc fdd0 	bl	80014c4 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e093      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	071b      	lsls	r3, r3, #28
 800496a:	491b      	ldr	r1, [pc, #108]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800496c:	4313      	orrs	r3, r2
 800496e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_RCC_OscConfig+0x4b4>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fc fda5 	bl	80014c4 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497e:	f7fc fda1 	bl	80014c4 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e064      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x452>
 800499c:	e05c      	b.n	8004a58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <HAL_RCC_OscConfig+0x4b4>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fc fd8e 	bl	80014c4 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fc fd8a 	bl	80014c4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e04d      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x480>
 80049ca:	e045      	b.n	8004a58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e040      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
 80049d8:	40023800 	.word	0x40023800
 80049dc:	40007000 	.word	0x40007000
 80049e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <HAL_RCC_OscConfig+0x538>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d030      	beq.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d129      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d122      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a14:	4013      	ands	r3, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d119      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d10f      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800

08004a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e07b      	b.n	8004b72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d108      	bne.n	8004a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8a:	d009      	beq.n	8004aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	61da      	str	r2, [r3, #28]
 8004a92:	e005      	b.n	8004aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fc fa60 	bl	8000f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	ea42 0103 	orr.w	r1, r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	f003 0104 	and.w	r1, r3, #4
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f003 0210 	and.w	r2, r3, #16
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e041      	b.n	8004c10 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fc fa6b 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f000 fb49 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e041      	b.n	8004cae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f839 	bl	8004cb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f000 fafa 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_TIM_PWM_Start+0x24>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	e022      	b.n	8004d36 <HAL_TIM_PWM_Start+0x6a>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d109      	bne.n	8004d0a <HAL_TIM_PWM_Start+0x3e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	e015      	b.n	8004d36 <HAL_TIM_PWM_Start+0x6a>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d109      	bne.n	8004d24 <HAL_TIM_PWM_Start+0x58>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e008      	b.n	8004d36 <HAL_TIM_PWM_Start+0x6a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07c      	b.n	8004e38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x82>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d4c:	e013      	b.n	8004d76 <HAL_TIM_PWM_Start+0xaa>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x92>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d5c:	e00b      	b.n	8004d76 <HAL_TIM_PWM_Start+0xaa>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_PWM_Start+0xa2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d6c:	e003      	b.n	8004d76 <HAL_TIM_PWM_Start+0xaa>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fd50 	bl	8005824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2d      	ldr	r2, [pc, #180]	; (8004e40 <HAL_TIM_PWM_Start+0x174>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_TIM_PWM_Start+0xcc>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2c      	ldr	r2, [pc, #176]	; (8004e44 <HAL_TIM_PWM_Start+0x178>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_PWM_Start+0xd0>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_TIM_PWM_Start+0xd2>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <HAL_TIM_PWM_Start+0x174>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d022      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x136>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc4:	d01d      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x136>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <HAL_TIM_PWM_Start+0x17c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d018      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x136>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <HAL_TIM_PWM_Start+0x180>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x136>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <HAL_TIM_PWM_Start+0x184>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x136>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a16      	ldr	r2, [pc, #88]	; (8004e44 <HAL_TIM_PWM_Start+0x178>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x136>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_TIM_PWM_Start+0x188>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x136>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <HAL_TIM_PWM_Start+0x18c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d111      	bne.n	8004e26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b06      	cmp	r3, #6
 8004e12:	d010      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	e007      	b.n	8004e36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40010400 	.word	0x40010400
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800
 8004e50:	40000c00 	.word	0x40000c00
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40001800 	.word	0x40001800

08004e5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fcd8 	bl	8005824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2e      	ldr	r2, [pc, #184]	; (8004f34 <HAL_TIM_PWM_Stop+0xd8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIM_PWM_Stop+0x2c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a2d      	ldr	r2, [pc, #180]	; (8004f38 <HAL_TIM_PWM_Stop+0xdc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_PWM_Stop+0x30>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <HAL_TIM_PWM_Stop+0x32>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d017      	beq.n	8004ec2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a1a      	ldr	r2, [r3, #32]
 8004e98:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_TIM_PWM_Stop+0x66>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6a1a      	ldr	r2, [r3, #32]
 8004ea8:	f240 4344 	movw	r3, #1092	; 0x444
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d107      	bne.n	8004ec2 <HAL_TIM_PWM_Stop+0x66>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a1a      	ldr	r2, [r3, #32]
 8004ec8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_TIM_PWM_Stop+0x96>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	f240 4344 	movw	r3, #1092	; 0x444
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d107      	bne.n	8004ef2 <HAL_TIM_PWM_Stop+0x96>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Stop+0xa6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f00:	e013      	b.n	8004f2a <HAL_TIM_PWM_Stop+0xce>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_PWM_Stop+0xb6>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f10:	e00b      	b.n	8004f2a <HAL_TIM_PWM_Stop+0xce>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d104      	bne.n	8004f22 <HAL_TIM_PWM_Stop+0xc6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f20:	e003      	b.n	8004f2a <HAL_TIM_PWM_Stop+0xce>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40010400 	.word	0x40010400

08004f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e0ae      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	f200 809f 	bhi.w	80050a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004fa5 	.word	0x08004fa5
 8004f74:	080050a9 	.word	0x080050a9
 8004f78:	080050a9 	.word	0x080050a9
 8004f7c:	080050a9 	.word	0x080050a9
 8004f80:	08004fe5 	.word	0x08004fe5
 8004f84:	080050a9 	.word	0x080050a9
 8004f88:	080050a9 	.word	0x080050a9
 8004f8c:	080050a9 	.word	0x080050a9
 8004f90:	08005027 	.word	0x08005027
 8004f94:	080050a9 	.word	0x080050a9
 8004f98:	080050a9 	.word	0x080050a9
 8004f9c:	080050a9 	.word	0x080050a9
 8004fa0:	08005067 	.word	0x08005067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f9f0 	bl	8005390 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0208 	orr.w	r2, r2, #8
 8004fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0204 	bic.w	r2, r2, #4
 8004fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6999      	ldr	r1, [r3, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	619a      	str	r2, [r3, #24]
      break;
 8004fe2:	e064      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fa40 	bl	8005470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	021a      	lsls	r2, r3, #8
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	619a      	str	r2, [r3, #24]
      break;
 8005024:	e043      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fa95 	bl	800555c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0208 	orr.w	r2, r2, #8
 8005040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0204 	bic.w	r2, r2, #4
 8005050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	61da      	str	r2, [r3, #28]
      break;
 8005064:	e023      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fae9 	bl	8005644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69d9      	ldr	r1, [r3, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	021a      	lsls	r2, r3, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	61da      	str	r2, [r3, #28]
      break;
 80050a6:	e002      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
      break;
 80050ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_ConfigClockSource+0x1c>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0b4      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x186>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005114:	d03e      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0xd4>
 8005116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511a:	f200 8087 	bhi.w	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005122:	f000 8086 	beq.w	8005232 <HAL_TIM_ConfigClockSource+0x172>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	d87f      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b70      	cmp	r3, #112	; 0x70
 800512e:	d01a      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0xa6>
 8005130:	2b70      	cmp	r3, #112	; 0x70
 8005132:	d87b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b60      	cmp	r3, #96	; 0x60
 8005136:	d050      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x11a>
 8005138:	2b60      	cmp	r3, #96	; 0x60
 800513a:	d877      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b50      	cmp	r3, #80	; 0x50
 800513e:	d03c      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0xfa>
 8005140:	2b50      	cmp	r3, #80	; 0x50
 8005142:	d873      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d058      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x13a>
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d86f      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b30      	cmp	r3, #48	; 0x30
 800514e:	d064      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15a>
 8005150:	2b30      	cmp	r3, #48	; 0x30
 8005152:	d86b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d060      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15a>
 8005158:	2b20      	cmp	r3, #32
 800515a:	d867      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15a>
 8005160:	2b10      	cmp	r3, #16
 8005162:	d05a      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15a>
 8005164:	e062      	b.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6899      	ldr	r1, [r3, #8]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f000 fb35 	bl	80057e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	609a      	str	r2, [r3, #8]
      break;
 8005192:	e04f      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6899      	ldr	r1, [r3, #8]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f000 fb1e 	bl	80057e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b6:	609a      	str	r2, [r3, #8]
      break;
 80051b8:	e03c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fa92 	bl	80056f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2150      	movs	r1, #80	; 0x50
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 faeb 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 80051d8:	e02c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 fab1 	bl	800574e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2160      	movs	r1, #96	; 0x60
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fadb 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 80051f8:	e01c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	461a      	mov	r2, r3
 8005208:	f000 fa72 	bl	80056f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2140      	movs	r1, #64	; 0x40
 8005212:	4618      	mov	r0, r3
 8005214:	f000 facb 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 8005218:	e00c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f000 fac2 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 800522a:	e003      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
      break;
 8005230:	e000      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a40      	ldr	r2, [pc, #256]	; (8005364 <TIM_Base_SetConfig+0x114>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526e:	d00f      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3d      	ldr	r2, [pc, #244]	; (8005368 <TIM_Base_SetConfig+0x118>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00b      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3c      	ldr	r2, [pc, #240]	; (800536c <TIM_Base_SetConfig+0x11c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3b      	ldr	r2, [pc, #236]	; (8005370 <TIM_Base_SetConfig+0x120>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3a      	ldr	r2, [pc, #232]	; (8005374 <TIM_Base_SetConfig+0x124>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d108      	bne.n	80052a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2f      	ldr	r2, [pc, #188]	; (8005364 <TIM_Base_SetConfig+0x114>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d02b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b0:	d027      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <TIM_Base_SetConfig+0x118>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d023      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2b      	ldr	r2, [pc, #172]	; (800536c <TIM_Base_SetConfig+0x11c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <TIM_Base_SetConfig+0x120>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a29      	ldr	r2, [pc, #164]	; (8005374 <TIM_Base_SetConfig+0x124>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d017      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a28      	ldr	r2, [pc, #160]	; (8005378 <TIM_Base_SetConfig+0x128>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a27      	ldr	r2, [pc, #156]	; (800537c <TIM_Base_SetConfig+0x12c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00f      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a26      	ldr	r2, [pc, #152]	; (8005380 <TIM_Base_SetConfig+0x130>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a25      	ldr	r2, [pc, #148]	; (8005384 <TIM_Base_SetConfig+0x134>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d007      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a24      	ldr	r2, [pc, #144]	; (8005388 <TIM_Base_SetConfig+0x138>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a23      	ldr	r2, [pc, #140]	; (800538c <TIM_Base_SetConfig+0x13c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d108      	bne.n	8005314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <TIM_Base_SetConfig+0x114>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0xf8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <TIM_Base_SetConfig+0x124>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	615a      	str	r2, [r3, #20]
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40010400 	.word	0x40010400
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400
 8005380:	40014800 	.word	0x40014800
 8005384:	40001800 	.word	0x40001800
 8005388:	40001c00 	.word	0x40001c00
 800538c:	40002000 	.word	0x40002000

08005390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 0302 	bic.w	r3, r3, #2
 80053d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a20      	ldr	r2, [pc, #128]	; (8005468 <TIM_OC1_SetConfig+0xd8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC1_SetConfig+0x64>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1f      	ldr	r2, [pc, #124]	; (800546c <TIM_OC1_SetConfig+0xdc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10c      	bne.n	800540e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0308 	bic.w	r3, r3, #8
 80053fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 0304 	bic.w	r3, r3, #4
 800540c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <TIM_OC1_SetConfig+0xd8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_OC1_SetConfig+0x8e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <TIM_OC1_SetConfig+0xdc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d111      	bne.n	8005442 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400

08005470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0210 	bic.w	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0320 	bic.w	r3, r3, #32
 80054ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a22      	ldr	r2, [pc, #136]	; (8005554 <TIM_OC2_SetConfig+0xe4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC2_SetConfig+0x68>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <TIM_OC2_SetConfig+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10d      	bne.n	80054f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a17      	ldr	r2, [pc, #92]	; (8005554 <TIM_OC2_SetConfig+0xe4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC2_SetConfig+0x94>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a16      	ldr	r2, [pc, #88]	; (8005558 <TIM_OC2_SetConfig+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d113      	bne.n	800552c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800550a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40010400 	.word	0x40010400

0800555c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a21      	ldr	r2, [pc, #132]	; (800563c <TIM_OC3_SetConfig+0xe0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC3_SetConfig+0x66>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a20      	ldr	r2, [pc, #128]	; (8005640 <TIM_OC3_SetConfig+0xe4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10d      	bne.n	80055de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <TIM_OC3_SetConfig+0xe0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_OC3_SetConfig+0x92>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a15      	ldr	r2, [pc, #84]	; (8005640 <TIM_OC3_SetConfig+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d113      	bne.n	8005616 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	621a      	str	r2, [r3, #32]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40010000 	.word	0x40010000
 8005640:	40010400 	.word	0x40010400

08005644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800568e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <TIM_OC4_SetConfig+0xa4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC4_SetConfig+0x68>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a11      	ldr	r2, [pc, #68]	; (80056ec <TIM_OC4_SetConfig+0xa8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d109      	bne.n	80056c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40010400 	.word	0x40010400

080056f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f023 0201 	bic.w	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800571a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 030a 	bic.w	r3, r3, #10
 800572c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0210 	bic.w	r2, r3, #16
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	031b      	lsls	r3, r3, #12
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800578a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f043 0307 	orr.w	r3, r3, #7
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	021a      	lsls	r2, r3, #8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	431a      	orrs	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4313      	orrs	r3, r2
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2201      	movs	r2, #1
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	43db      	mvns	r3, r3
 8005846:	401a      	ands	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005884:	2302      	movs	r3, #2
 8005886:	e05a      	b.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d4:	d01d      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a18      	ldr	r2, [pc, #96]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a17      	ldr	r2, [pc, #92]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a15      	ldr	r2, [pc, #84]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10c      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4313      	orrs	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40010400 	.word	0x40010400
 8005960:	40014000 	.word	0x40014000
 8005964:	40001800 	.word	0x40001800

08005968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e03f      	b.n	80059fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fb fc44 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2224      	movs	r2, #36	; 0x24
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f829 	bl	8005a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695a      	ldr	r2, [r3, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a08:	b0c0      	sub	sp, #256	; 0x100
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	68d9      	ldr	r1, [r3, #12]
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	ea40 0301 	orr.w	r3, r0, r1
 8005a2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a5c:	f021 010c 	bic.w	r1, r1, #12
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	6999      	ldr	r1, [r3, #24]
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	ea40 0301 	orr.w	r3, r0, r1
 8005a8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b8f      	ldr	r3, [pc, #572]	; (8005cd0 <UART_SetConfig+0x2cc>)
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d005      	beq.n	8005aa4 <UART_SetConfig+0xa0>
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b8d      	ldr	r3, [pc, #564]	; (8005cd4 <UART_SetConfig+0x2d0>)
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d104      	bne.n	8005aae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005aa4:	f7fd ffd4 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8005aa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005aac:	e003      	b.n	8005ab6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aae:	f7fd ffbb 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005ab2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac0:	f040 810c 	bne.w	8005cdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ace:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ad2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	1891      	adds	r1, r2, r2
 8005adc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ade:	415b      	adcs	r3, r3
 8005ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ae2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	eb12 0801 	adds.w	r8, r2, r1
 8005aec:	4629      	mov	r1, r5
 8005aee:	eb43 0901 	adc.w	r9, r3, r1
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b06:	4690      	mov	r8, r2
 8005b08:	4699      	mov	r9, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	eb18 0303 	adds.w	r3, r8, r3
 8005b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b14:	462b      	mov	r3, r5
 8005b16:	eb49 0303 	adc.w	r3, r9, r3
 8005b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b32:	460b      	mov	r3, r1
 8005b34:	18db      	adds	r3, r3, r3
 8005b36:	653b      	str	r3, [r7, #80]	; 0x50
 8005b38:	4613      	mov	r3, r2
 8005b3a:	eb42 0303 	adc.w	r3, r2, r3
 8005b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b48:	f7fa fb5c 	bl	8000204 <__aeabi_uldivmod>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4b61      	ldr	r3, [pc, #388]	; (8005cd8 <UART_SetConfig+0x2d4>)
 8005b52:	fba3 2302 	umull	r2, r3, r3, r2
 8005b56:	095b      	lsrs	r3, r3, #5
 8005b58:	011c      	lsls	r4, r3, #4
 8005b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	464b      	mov	r3, r9
 8005b70:	1891      	adds	r1, r2, r2
 8005b72:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b74:	415b      	adcs	r3, r3
 8005b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b82:	4649      	mov	r1, r9
 8005b84:	eb43 0b01 	adc.w	fp, r3, r1
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b9c:	4692      	mov	sl, r2
 8005b9e:	469b      	mov	fp, r3
 8005ba0:	4643      	mov	r3, r8
 8005ba2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005baa:	464b      	mov	r3, r9
 8005bac:	eb4b 0303 	adc.w	r3, fp, r3
 8005bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	18db      	adds	r3, r3, r3
 8005bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bce:	4613      	mov	r3, r2
 8005bd0:	eb42 0303 	adc.w	r3, r2, r3
 8005bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bde:	f7fa fb11 	bl	8000204 <__aeabi_uldivmod>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	4b3b      	ldr	r3, [pc, #236]	; (8005cd8 <UART_SetConfig+0x2d4>)
 8005bea:	fba3 2301 	umull	r2, r3, r3, r1
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2264      	movs	r2, #100	; 0x64
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	1acb      	subs	r3, r1, r3
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bfe:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <UART_SetConfig+0x2d4>)
 8005c00:	fba3 2302 	umull	r2, r3, r3, r2
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c0c:	441c      	add	r4, r3
 8005c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	1891      	adds	r1, r2, r2
 8005c26:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c28:	415b      	adcs	r3, r3
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c30:	4641      	mov	r1, r8
 8005c32:	1851      	adds	r1, r2, r1
 8005c34:	6339      	str	r1, [r7, #48]	; 0x30
 8005c36:	4649      	mov	r1, r9
 8005c38:	414b      	adcs	r3, r1
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c48:	4659      	mov	r1, fp
 8005c4a:	00cb      	lsls	r3, r1, #3
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c52:	4651      	mov	r1, sl
 8005c54:	00ca      	lsls	r2, r1, #3
 8005c56:	4610      	mov	r0, r2
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	189b      	adds	r3, r3, r2
 8005c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c64:	464b      	mov	r3, r9
 8005c66:	460a      	mov	r2, r1
 8005c68:	eb42 0303 	adc.w	r3, r2, r3
 8005c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c84:	460b      	mov	r3, r1
 8005c86:	18db      	adds	r3, r3, r3
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c9a:	f7fa fab3 	bl	8000204 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <UART_SetConfig+0x2d4>)
 8005ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	2164      	movs	r1, #100	; 0x64
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	3332      	adds	r3, #50	; 0x32
 8005cb6:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <UART_SetConfig+0x2d4>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f003 0207 	and.w	r2, r3, #7
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4422      	add	r2, r4
 8005cca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ccc:	e105      	b.n	8005eda <UART_SetConfig+0x4d6>
 8005cce:	bf00      	nop
 8005cd0:	40011000 	.word	0x40011000
 8005cd4:	40011400 	.word	0x40011400
 8005cd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ce6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cee:	4642      	mov	r2, r8
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	1891      	adds	r1, r2, r2
 8005cf4:	6239      	str	r1, [r7, #32]
 8005cf6:	415b      	adcs	r3, r3
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cfe:	4641      	mov	r1, r8
 8005d00:	1854      	adds	r4, r2, r1
 8005d02:	4649      	mov	r1, r9
 8005d04:	eb43 0501 	adc.w	r5, r3, r1
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	00eb      	lsls	r3, r5, #3
 8005d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d16:	00e2      	lsls	r2, r4, #3
 8005d18:	4614      	mov	r4, r2
 8005d1a:	461d      	mov	r5, r3
 8005d1c:	4643      	mov	r3, r8
 8005d1e:	18e3      	adds	r3, r4, r3
 8005d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d24:	464b      	mov	r3, r9
 8005d26:	eb45 0303 	adc.w	r3, r5, r3
 8005d2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	008b      	lsls	r3, r1, #2
 8005d4e:	4621      	mov	r1, r4
 8005d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d54:	4621      	mov	r1, r4
 8005d56:	008a      	lsls	r2, r1, #2
 8005d58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d5c:	f7fa fa52 	bl	8000204 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4b60      	ldr	r3, [pc, #384]	; (8005ee8 <UART_SetConfig+0x4e4>)
 8005d66:	fba3 2302 	umull	r2, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	011c      	lsls	r4, r3, #4
 8005d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	1891      	adds	r1, r2, r2
 8005d86:	61b9      	str	r1, [r7, #24]
 8005d88:	415b      	adcs	r3, r3
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d90:	4641      	mov	r1, r8
 8005d92:	1851      	adds	r1, r2, r1
 8005d94:	6139      	str	r1, [r7, #16]
 8005d96:	4649      	mov	r1, r9
 8005d98:	414b      	adcs	r3, r1
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da8:	4659      	mov	r1, fp
 8005daa:	00cb      	lsls	r3, r1, #3
 8005dac:	4651      	mov	r1, sl
 8005dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005db2:	4651      	mov	r1, sl
 8005db4:	00ca      	lsls	r2, r1, #3
 8005db6:	4610      	mov	r0, r2
 8005db8:	4619      	mov	r1, r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	189b      	adds	r3, r3, r2
 8005dc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	460a      	mov	r2, r1
 8005dc8:	eb42 0303 	adc.w	r3, r2, r3
 8005dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005de8:	4649      	mov	r1, r9
 8005dea:	008b      	lsls	r3, r1, #2
 8005dec:	4641      	mov	r1, r8
 8005dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df2:	4641      	mov	r1, r8
 8005df4:	008a      	lsls	r2, r1, #2
 8005df6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dfa:	f7fa fa03 	bl	8000204 <__aeabi_uldivmod>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4b39      	ldr	r3, [pc, #228]	; (8005ee8 <UART_SetConfig+0x4e4>)
 8005e04:	fba3 1302 	umull	r1, r3, r3, r2
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	2164      	movs	r1, #100	; 0x64
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	3332      	adds	r3, #50	; 0x32
 8005e16:	4a34      	ldr	r2, [pc, #208]	; (8005ee8 <UART_SetConfig+0x4e4>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e22:	441c      	add	r4, r3
 8005e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e28:	2200      	movs	r2, #0
 8005e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e2c:	677a      	str	r2, [r7, #116]	; 0x74
 8005e2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e32:	4642      	mov	r2, r8
 8005e34:	464b      	mov	r3, r9
 8005e36:	1891      	adds	r1, r2, r2
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	415b      	adcs	r3, r3
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e42:	4641      	mov	r1, r8
 8005e44:	1851      	adds	r1, r2, r1
 8005e46:	6039      	str	r1, [r7, #0]
 8005e48:	4649      	mov	r1, r9
 8005e4a:	414b      	adcs	r3, r1
 8005e4c:	607b      	str	r3, [r7, #4]
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e5a:	4659      	mov	r1, fp
 8005e5c:	00cb      	lsls	r3, r1, #3
 8005e5e:	4651      	mov	r1, sl
 8005e60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e64:	4651      	mov	r1, sl
 8005e66:	00ca      	lsls	r2, r1, #3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	4642      	mov	r2, r8
 8005e70:	189b      	adds	r3, r3, r2
 8005e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e74:	464b      	mov	r3, r9
 8005e76:	460a      	mov	r2, r1
 8005e78:	eb42 0303 	adc.w	r3, r2, r3
 8005e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	663b      	str	r3, [r7, #96]	; 0x60
 8005e88:	667a      	str	r2, [r7, #100]	; 0x64
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e96:	4649      	mov	r1, r9
 8005e98:	008b      	lsls	r3, r1, #2
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	008a      	lsls	r2, r1, #2
 8005ea4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ea8:	f7fa f9ac 	bl	8000204 <__aeabi_uldivmod>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <UART_SetConfig+0x4e4>)
 8005eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	2164      	movs	r1, #100	; 0x64
 8005eba:	fb01 f303 	mul.w	r3, r1, r3
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	3332      	adds	r3, #50	; 0x32
 8005ec4:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <UART_SetConfig+0x4e4>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4422      	add	r2, r4
 8005ed8:	609a      	str	r2, [r3, #8]
}
 8005eda:	bf00      	nop
 8005edc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee6:	bf00      	nop
 8005ee8:	51eb851f 	.word	0x51eb851f

08005eec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eec:	b084      	sub	sp, #16
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	f107 001c 	add.w	r0, r7, #28
 8005efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d122      	bne.n	8005f4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d105      	bne.n	8005f3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 fbe8 	bl	8007714 <USB_CoreReset>
 8005f44:	4603      	mov	r3, r0
 8005f46:	73fb      	strb	r3, [r7, #15]
 8005f48:	e01a      	b.n	8005f80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f001 fbdc 	bl	8007714 <USB_CoreReset>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	639a      	str	r2, [r3, #56]	; 0x38
 8005f72:	e005      	b.n	8005f80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d10b      	bne.n	8005f9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f043 0206 	orr.w	r2, r3, #6
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005faa:	b004      	add	sp, #16
 8005fac:	4770      	bx	lr
	...

08005fb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d165      	bne.n	8006090 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a41      	ldr	r2, [pc, #260]	; (80060cc <USB_SetTurnaroundTime+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d906      	bls.n	8005fda <USB_SetTurnaroundTime+0x2a>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4a40      	ldr	r2, [pc, #256]	; (80060d0 <USB_SetTurnaroundTime+0x120>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d202      	bcs.n	8005fda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fd4:	230f      	movs	r3, #15
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e062      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a3c      	ldr	r2, [pc, #240]	; (80060d0 <USB_SetTurnaroundTime+0x120>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d306      	bcc.n	8005ff0 <USB_SetTurnaroundTime+0x40>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4a3b      	ldr	r2, [pc, #236]	; (80060d4 <USB_SetTurnaroundTime+0x124>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d202      	bcs.n	8005ff0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fea:	230e      	movs	r3, #14
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e057      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a38      	ldr	r2, [pc, #224]	; (80060d4 <USB_SetTurnaroundTime+0x124>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d306      	bcc.n	8006006 <USB_SetTurnaroundTime+0x56>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4a37      	ldr	r2, [pc, #220]	; (80060d8 <USB_SetTurnaroundTime+0x128>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d202      	bcs.n	8006006 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006000:	230d      	movs	r3, #13
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e04c      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a33      	ldr	r2, [pc, #204]	; (80060d8 <USB_SetTurnaroundTime+0x128>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d306      	bcc.n	800601c <USB_SetTurnaroundTime+0x6c>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4a32      	ldr	r2, [pc, #200]	; (80060dc <USB_SetTurnaroundTime+0x12c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d802      	bhi.n	800601c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006016:	230c      	movs	r3, #12
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e041      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a2f      	ldr	r2, [pc, #188]	; (80060dc <USB_SetTurnaroundTime+0x12c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d906      	bls.n	8006032 <USB_SetTurnaroundTime+0x82>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4a2e      	ldr	r2, [pc, #184]	; (80060e0 <USB_SetTurnaroundTime+0x130>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d802      	bhi.n	8006032 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800602c:	230b      	movs	r3, #11
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e036      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <USB_SetTurnaroundTime+0x130>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d906      	bls.n	8006048 <USB_SetTurnaroundTime+0x98>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <USB_SetTurnaroundTime+0x134>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d802      	bhi.n	8006048 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006042:	230a      	movs	r3, #10
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	e02b      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a26      	ldr	r2, [pc, #152]	; (80060e4 <USB_SetTurnaroundTime+0x134>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d906      	bls.n	800605e <USB_SetTurnaroundTime+0xae>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a25      	ldr	r2, [pc, #148]	; (80060e8 <USB_SetTurnaroundTime+0x138>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d202      	bcs.n	800605e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006058:	2309      	movs	r3, #9
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	e020      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a21      	ldr	r2, [pc, #132]	; (80060e8 <USB_SetTurnaroundTime+0x138>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d306      	bcc.n	8006074 <USB_SetTurnaroundTime+0xc4>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4a20      	ldr	r2, [pc, #128]	; (80060ec <USB_SetTurnaroundTime+0x13c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d802      	bhi.n	8006074 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800606e:	2308      	movs	r3, #8
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	e015      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <USB_SetTurnaroundTime+0x13c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d906      	bls.n	800608a <USB_SetTurnaroundTime+0xda>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <USB_SetTurnaroundTime+0x140>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d202      	bcs.n	800608a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006084:	2307      	movs	r3, #7
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e00a      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800608a:	2306      	movs	r3, #6
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e007      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d102      	bne.n	800609c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006096:	2309      	movs	r3, #9
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e001      	b.n	80060a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800609c:	2309      	movs	r3, #9
 800609e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	029b      	lsls	r3, r3, #10
 80060b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80060b8:	431a      	orrs	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	00d8acbf 	.word	0x00d8acbf
 80060d0:	00e4e1c0 	.word	0x00e4e1c0
 80060d4:	00f42400 	.word	0x00f42400
 80060d8:	01067380 	.word	0x01067380
 80060dc:	011a499f 	.word	0x011a499f
 80060e0:	01312cff 	.word	0x01312cff
 80060e4:	014ca43f 	.word	0x014ca43f
 80060e8:	016e3600 	.word	0x016e3600
 80060ec:	01a6ab1f 	.word	0x01a6ab1f
 80060f0:	01e84800 	.word	0x01e84800

080060f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f043 0201 	orr.w	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 0201 	bic.w	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d115      	bne.n	8006186 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006166:	2001      	movs	r0, #1
 8006168:	f7fb f9b8 	bl	80014dc <HAL_Delay>
      ms++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fa3f 	bl	80075f6 <USB_GetMode>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d01e      	beq.n	80061bc <USB_SetCurrentMode+0x84>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b31      	cmp	r3, #49	; 0x31
 8006182:	d9f0      	bls.n	8006166 <USB_SetCurrentMode+0x2e>
 8006184:	e01a      	b.n	80061bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d115      	bne.n	80061b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006198:	2001      	movs	r0, #1
 800619a:	f7fb f99f 	bl	80014dc <HAL_Delay>
      ms++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3301      	adds	r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fa26 	bl	80075f6 <USB_GetMode>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <USB_SetCurrentMode+0x84>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b31      	cmp	r3, #49	; 0x31
 80061b4:	d9f0      	bls.n	8006198 <USB_SetCurrentMode+0x60>
 80061b6:	e001      	b.n	80061bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e005      	b.n	80061c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b32      	cmp	r3, #50	; 0x32
 80061c0:	d101      	bne.n	80061c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061d0:	b084      	sub	sp, #16
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b086      	sub	sp, #24
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	e009      	b.n	8006204 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3340      	adds	r3, #64	; 0x40
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3301      	adds	r3, #1
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b0e      	cmp	r3, #14
 8006208:	d9f2      	bls.n	80061f0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800620a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11c      	bne.n	800624a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621e:	f043 0302 	orr.w	r3, r3, #2
 8006222:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	e005      	b.n	8006256 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800625c:	461a      	mov	r2, r3
 800625e:	2300      	movs	r3, #0
 8006260:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006268:	4619      	mov	r1, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006270:	461a      	mov	r2, r3
 8006272:	680b      	ldr	r3, [r1, #0]
 8006274:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	2b01      	cmp	r3, #1
 800627a:	d10c      	bne.n	8006296 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006282:	2100      	movs	r1, #0
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f965 	bl	8006554 <USB_SetDevSpeed>
 800628a:	e008      	b.n	800629e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800628c:	2101      	movs	r1, #1
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f960 	bl	8006554 <USB_SetDevSpeed>
 8006294:	e003      	b.n	800629e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006296:	2103      	movs	r1, #3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f95b 	bl	8006554 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800629e:	2110      	movs	r1, #16
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f8f3 	bl	800648c <USB_FlushTxFifo>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f91f 	bl	80064f4 <USB_FlushRxFifo>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	461a      	mov	r2, r3
 80062c8:	2300      	movs	r3, #0
 80062ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	461a      	mov	r2, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062de:	461a      	mov	r2, r3
 80062e0:	2300      	movs	r3, #0
 80062e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	e043      	b.n	8006372 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006300:	d118      	bne.n	8006334 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006314:	461a      	mov	r2, r3
 8006316:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e013      	b.n	8006346 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	461a      	mov	r2, r3
 800632c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e008      	b.n	8006346 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	461a      	mov	r2, r3
 8006342:	2300      	movs	r3, #0
 8006344:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006352:	461a      	mov	r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	461a      	mov	r2, r3
 8006366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800636a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	3301      	adds	r3, #1
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	429a      	cmp	r2, r3
 8006378:	d3b7      	bcc.n	80062ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800637a:	2300      	movs	r3, #0
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	e043      	b.n	8006408 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006396:	d118      	bne.n	80063ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063aa:	461a      	mov	r2, r3
 80063ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e013      	b.n	80063dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	461a      	mov	r2, r3
 80063c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	e008      	b.n	80063dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	461a      	mov	r2, r3
 80063d8:	2300      	movs	r3, #0
 80063da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	461a      	mov	r2, r3
 80063ea:	2300      	movs	r3, #0
 80063ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	461a      	mov	r2, r3
 80063fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006400:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	3301      	adds	r3, #1
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	429a      	cmp	r2, r3
 800640e:	d3b7      	bcc.n	8006380 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800641e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006422:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006430:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f043 0210 	orr.w	r2, r3, #16
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <USB_DevInit+0x2b8>)
 800644a:	4313      	orrs	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f043 0208 	orr.w	r2, r3, #8
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d107      	bne.n	8006478 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006470:	f043 0304 	orr.w	r3, r3, #4
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006484:	b004      	add	sp, #16
 8006486:	4770      	bx	lr
 8006488:	803c3800 	.word	0x803c3800

0800648c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a13      	ldr	r2, [pc, #76]	; (80064f0 <USB_FlushTxFifo+0x64>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d901      	bls.n	80064ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e01b      	b.n	80064e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	daf2      	bge.n	800649a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	019b      	lsls	r3, r3, #6
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <USB_FlushTxFifo+0x64>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d901      	bls.n	80064d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e006      	b.n	80064e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d0f0      	beq.n	80064c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	00030d40 	.word	0x00030d40

080064f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a11      	ldr	r2, [pc, #68]	; (8006550 <USB_FlushRxFifo+0x5c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e018      	b.n	8006544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	daf2      	bge.n	8006500 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2210      	movs	r2, #16
 8006522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a08      	ldr	r2, [pc, #32]	; (8006550 <USB_FlushRxFifo+0x5c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d901      	bls.n	8006536 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e006      	b.n	8006544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b10      	cmp	r3, #16
 8006540:	d0f0      	beq.n	8006524 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	00030d40 	.word	0x00030d40

08006554 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006574:	4313      	orrs	r3, r2
 8006576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b087      	sub	sp, #28
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 0306 	and.w	r3, r3, #6
 800659e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]
 80065aa:	e00a      	b.n	80065c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d002      	beq.n	80065b8 <USB_GetDevSpeed+0x32>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b06      	cmp	r3, #6
 80065b6:	d102      	bne.n	80065be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065b8:	2302      	movs	r3, #2
 80065ba:	75fb      	strb	r3, [r7, #23]
 80065bc:	e001      	b.n	80065c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065be:	230f      	movs	r3, #15
 80065c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d13a      	bne.n	8006662 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	2101      	movs	r1, #1
 80065fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006602:	b29b      	uxth	r3, r3
 8006604:	68f9      	ldr	r1, [r7, #12]
 8006606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800660a:	4313      	orrs	r3, r2
 800660c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d155      	bne.n	80066d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	791b      	ldrb	r3, [r3, #4]
 800663e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006640:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	059b      	lsls	r3, r3, #22
 8006646:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006648:	4313      	orrs	r3, r2
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e036      	b.n	80066d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006668:	69da      	ldr	r2, [r3, #28]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	2101      	movs	r1, #1
 8006674:	fa01 f303 	lsl.w	r3, r1, r3
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006680:	4313      	orrs	r3, r2
 8006682:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d11a      	bne.n	80066d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	791b      	ldrb	r3, [r3, #4]
 80066b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066b6:	430b      	orrs	r3, r1
 80066b8:	4313      	orrs	r3, r2
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d161      	bne.n	80067c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800670e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006712:	d11f      	bne.n	8006754 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006732:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006752:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	2101      	movs	r1, #1
 8006766:	fa01 f303 	lsl.w	r3, r1, r3
 800676a:	b29b      	uxth	r3, r3
 800676c:	43db      	mvns	r3, r3
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006774:	4013      	ands	r3, r2
 8006776:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 f303 	lsl.w	r3, r1, r3
 800678e:	b29b      	uxth	r3, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006798:	4013      	ands	r3, r2
 800679a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	0159      	lsls	r1, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	440b      	add	r3, r1
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	4619      	mov	r1, r3
 80067b8:	4b35      	ldr	r3, [pc, #212]	; (8006890 <USB_DeactivateEndpoint+0x1b0>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	600b      	str	r3, [r1, #0]
 80067be:	e060      	b.n	8006882 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d6:	d11f      	bne.n	8006818 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	440a      	add	r2, r1
 800680e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006816:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	2101      	movs	r1, #1
 800682a:	fa01 f303 	lsl.w	r3, r1, r3
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	43db      	mvns	r3, r3
 8006832:	68f9      	ldr	r1, [r7, #12]
 8006834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006838:	4013      	ands	r3, r2
 800683a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	2101      	movs	r1, #1
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	43db      	mvns	r3, r3
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800685c:	4013      	ands	r3, r2
 800685e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	0159      	lsls	r1, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	440b      	add	r3, r1
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	4619      	mov	r1, r3
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <USB_DeactivateEndpoint+0x1b4>)
 800687e:	4013      	ands	r3, r2
 8006880:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	ec337800 	.word	0xec337800
 8006894:	eff37800 	.word	0xeff37800

08006898 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	; 0x28
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	f040 815c 	bne.w	8006b72 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d132      	bne.n	8006928 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006904:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	440a      	add	r2, r1
 800691c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006920:	0cdb      	lsrs	r3, r3, #19
 8006922:	04db      	lsls	r3, r3, #19
 8006924:	6113      	str	r3, [r2, #16]
 8006926:	e074      	b.n	8006a12 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006942:	0cdb      	lsrs	r3, r3, #19
 8006944:	04db      	lsls	r3, r3, #19
 8006946:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	440a      	add	r2, r1
 800695e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006962:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006966:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800696a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6999      	ldr	r1, [r3, #24]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	440b      	add	r3, r1
 8006984:	1e59      	subs	r1, r3, #1
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	fbb1 f3f3 	udiv	r3, r1, r3
 800698e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006990:	4b9d      	ldr	r3, [pc, #628]	; (8006c08 <USB_EPStartXfer+0x370>)
 8006992:	400b      	ands	r3, r1
 8006994:	69b9      	ldr	r1, [r7, #24]
 8006996:	0148      	lsls	r0, r1, #5
 8006998:	69f9      	ldr	r1, [r7, #28]
 800699a:	4401      	add	r1, r0
 800699c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069a0:	4313      	orrs	r3, r2
 80069a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ba:	69b9      	ldr	r1, [r7, #24]
 80069bc:	0148      	lsls	r0, r1, #5
 80069be:	69f9      	ldr	r1, [r7, #28]
 80069c0:	4401      	add	r1, r0
 80069c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069c6:	4313      	orrs	r3, r2
 80069c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	791b      	ldrb	r3, [r3, #4]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d11f      	bne.n	8006a12 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80069f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d14b      	bne.n	8006ab0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	791b      	ldrb	r3, [r3, #4]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d128      	bne.n	8006a8e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d110      	bne.n	8006a6e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	e00f      	b.n	8006a8e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	e133      	b.n	8006d18 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ace:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	791b      	ldrb	r3, [r3, #4]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d015      	beq.n	8006b04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 811b 	beq.w	8006d18 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	2101      	movs	r1, #1
 8006af4:	fa01 f303 	lsl.w	r3, r1, r3
 8006af8:	69f9      	ldr	r1, [r7, #28]
 8006afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006afe:	4313      	orrs	r3, r2
 8006b00:	634b      	str	r3, [r1, #52]	; 0x34
 8006b02:	e109      	b.n	8006d18 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d110      	bne.n	8006b36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	e00f      	b.n	8006b56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	6919      	ldr	r1, [r3, #16]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	b298      	uxth	r0, r3
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	4603      	mov	r3, r0
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fade 	bl	800712c <USB_WritePacket>
 8006b70:	e0d2      	b.n	8006d18 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8c:	0cdb      	lsrs	r3, r3, #19
 8006b8e:	04db      	lsls	r3, r3, #19
 8006b90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	69fa      	ldr	r2, [r7, #28]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bb4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d126      	bne.n	8006c0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	0148      	lsls	r0, r1, #5
 8006bd8:	69f9      	ldr	r1, [r7, #28]
 8006bda:	4401      	add	r1, r0
 8006bdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006be0:	4313      	orrs	r3, r2
 8006be2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c02:	6113      	str	r3, [r2, #16]
 8006c04:	e03a      	b.n	8006c7c <USB_EPStartXfer+0x3e4>
 8006c06:	bf00      	nop
 8006c08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	1e5a      	subs	r2, r3, #1
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	8afa      	ldrh	r2, [r7, #22]
 8006c28:	fb03 f202 	mul.w	r2, r3, r2
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	8afb      	ldrh	r3, [r7, #22]
 8006c40:	04d9      	lsls	r1, r3, #19
 8006c42:	4b38      	ldr	r3, [pc, #224]	; (8006d24 <USB_EPStartXfer+0x48c>)
 8006c44:	400b      	ands	r3, r1
 8006c46:	69b9      	ldr	r1, [r7, #24]
 8006c48:	0148      	lsls	r0, r1, #5
 8006c4a:	69f9      	ldr	r1, [r7, #28]
 8006c4c:	4401      	add	r1, r0
 8006c4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c52:	4313      	orrs	r3, r2
 8006c54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6c:	69b9      	ldr	r1, [r7, #24]
 8006c6e:	0148      	lsls	r0, r1, #5
 8006c70:	69f9      	ldr	r1, [r7, #28]
 8006c72:	4401      	add	r1, r0
 8006c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10d      	bne.n	8006c9e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6919      	ldr	r1, [r3, #16]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	791b      	ldrb	r3, [r3, #4]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d128      	bne.n	8006cf8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d110      	bne.n	8006cd8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e00f      	b.n	8006cf8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	1ff80000 	.word	0x1ff80000

08006d28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 80ce 	bne.w	8006ee6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d132      	bne.n	8006db8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db0:	0cdb      	lsrs	r3, r3, #19
 8006db2:	04db      	lsls	r3, r3, #19
 8006db4:	6113      	str	r3, [r2, #16]
 8006db6:	e04e      	b.n	8006e56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd2:	0cdb      	lsrs	r3, r3, #19
 8006dd4:	04db      	lsls	r3, r3, #19
 8006dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006df6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	699a      	ldr	r2, [r3, #24]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d903      	bls.n	8006e10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e46:	6939      	ldr	r1, [r7, #16]
 8006e48:	0148      	lsls	r0, r1, #5
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	4401      	add	r1, r0
 8006e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e52:	4313      	orrs	r3, r2
 8006e54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d11e      	bne.n	8006e9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	e097      	b.n	8006fca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 8083 	beq.w	8006fca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eda:	6979      	ldr	r1, [r7, #20]
 8006edc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	634b      	str	r3, [r1, #52]	; 0x34
 8006ee4:	e071      	b.n	8006fca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f00:	0cdb      	lsrs	r3, r3, #19
 8006f02:	04db      	lsls	r3, r3, #19
 8006f04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f78:	6939      	ldr	r1, [r7, #16]
 8006f7a:	0148      	lsls	r0, r1, #5
 8006f7c:	6979      	ldr	r1, [r7, #20]
 8006f7e:	4401      	add	r1, r0
 8006f80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f84:	4313      	orrs	r3, r2
 8006f86:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d10d      	bne.n	8006faa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6919      	ldr	r1, [r3, #16]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	785b      	ldrb	r3, [r3, #1]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d14a      	bne.n	800708c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800700a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800700e:	f040 8086 	bne.w	800711e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	7812      	ldrb	r2, [r2, #0]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007030:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007034:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007054:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007058:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f242 7210 	movw	r2, #10000	; 0x2710
 8007066:	4293      	cmp	r3, r2
 8007068:	d902      	bls.n	8007070 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	75fb      	strb	r3, [r7, #23]
          break;
 800706e:	e056      	b.n	800711e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007088:	d0e7      	beq.n	800705a <USB_EPStopXfer+0x82>
 800708a:	e048      	b.n	800711e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a4:	d13b      	bne.n	800711e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	7812      	ldrb	r2, [r2, #0]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	7812      	ldrb	r2, [r2, #0]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d902      	bls.n	8007104 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
          break;
 8007102:	e00c      	b.n	800711e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800711c:	d0e7      	beq.n	80070ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800711e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007120:	4618      	mov	r0, r3
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800712c:	b480      	push	{r7}
 800712e:	b089      	sub	sp, #36	; 0x24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	4611      	mov	r1, r2
 8007138:	461a      	mov	r2, r3
 800713a:	460b      	mov	r3, r1
 800713c:	71fb      	strb	r3, [r7, #7]
 800713e:	4613      	mov	r3, r2
 8007140:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800714a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	d123      	bne.n	800719a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007152:	88bb      	ldrh	r3, [r7, #4]
 8007154:	3303      	adds	r3, #3
 8007156:	089b      	lsrs	r3, r3, #2
 8007158:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	e018      	b.n	8007192 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	031a      	lsls	r2, r3, #12
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	4413      	add	r3, r2
 8007168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716c:	461a      	mov	r2, r3
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	3301      	adds	r3, #1
 8007178:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	3301      	adds	r3, #1
 800717e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	3301      	adds	r3, #1
 8007184:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3301      	adds	r3, #1
 800718a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	3301      	adds	r3, #1
 8007190:	61bb      	str	r3, [r7, #24]
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	429a      	cmp	r2, r3
 8007198:	d3e2      	bcc.n	8007160 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3724      	adds	r7, #36	; 0x24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b08b      	sub	sp, #44	; 0x2c
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	089b      	lsrs	r3, r3, #2
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071ce:	2300      	movs	r3, #0
 80071d0:	623b      	str	r3, [r7, #32]
 80071d2:	e014      	b.n	80071fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	601a      	str	r2, [r3, #0]
    pDest++;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	3301      	adds	r3, #1
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	3301      	adds	r3, #1
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	3301      	adds	r3, #1
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	3301      	adds	r3, #1
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	3301      	adds	r3, #1
 80071fc:	623b      	str	r3, [r7, #32]
 80071fe:	6a3a      	ldr	r2, [r7, #32]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	429a      	cmp	r2, r3
 8007204:	d3e6      	bcc.n	80071d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007206:	8bfb      	ldrh	r3, [r7, #30]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01e      	beq.n	800724a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007216:	461a      	mov	r2, r3
 8007218:	f107 0310 	add.w	r3, r7, #16
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	fa22 f303 	lsr.w	r3, r2, r3
 800722c:	b2da      	uxtb	r2, r3
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	701a      	strb	r2, [r3, #0]
      i++;
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	3301      	adds	r3, #1
 8007236:	623b      	str	r3, [r7, #32]
      pDest++;
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	3301      	adds	r3, #1
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800723e:	8bfb      	ldrh	r3, [r7, #30]
 8007240:	3b01      	subs	r3, #1
 8007242:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007244:	8bfb      	ldrh	r3, [r7, #30]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1ea      	bne.n	8007220 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800724c:	4618      	mov	r0, r3
 800724e:	372c      	adds	r7, #44	; 0x2c
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d12c      	bne.n	80072ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	db12      	blt.n	80072ac <USB_EPSetStall+0x54>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00f      	beq.n	80072ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	e02b      	b.n	8007326 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	db12      	blt.n	8007306 <USB_EPSetStall+0xae>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00f      	beq.n	8007306 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007304:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	440a      	add	r2, r1
 800731c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007324:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d128      	bne.n	80073a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800736e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	791b      	ldrb	r3, [r3, #4]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d003      	beq.n	8007380 <USB_EPClearStall+0x4c>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	791b      	ldrb	r3, [r3, #4]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d138      	bne.n	80073f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	440a      	add	r2, r1
 8007396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800739a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	e027      	b.n	80073f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	791b      	ldrb	r3, [r3, #4]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d003      	beq.n	80073d2 <USB_EPClearStall+0x9e>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	791b      	ldrb	r3, [r3, #4]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d10f      	bne.n	80073f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800741e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007422:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743a:	4313      	orrs	r3, r2
 800743c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800747a:	f023 0302 	bic.w	r3, r3, #2
 800747e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074a8:	f023 0303 	bic.w	r3, r3, #3
 80074ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074bc:	f043 0302 	orr.w	r3, r3, #2
 80074c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4013      	ands	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074e8:	68fb      	ldr	r3, [r7, #12]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	4013      	ands	r3, r2
 8007518:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	0c1b      	lsrs	r3, r3, #16
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	4013      	ands	r3, r2
 800754c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	b29b      	uxth	r3, r3
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	4013      	ands	r3, r2
 800758a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800758c:	68bb      	ldr	r3, [r7, #8]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800759a:	b480      	push	{r7}
 800759c:	b087      	sub	sp, #28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	f003 030f 	and.w	r3, r3, #15
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ca:	01db      	lsls	r3, r3, #7
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	4013      	ands	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075e8:	68bb      	ldr	r3, [r7, #8]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0301 	and.w	r3, r3, #1
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007630:	f023 0307 	bic.w	r3, r3, #7
 8007634:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007648:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	460b      	mov	r3, r1
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	333c      	adds	r3, #60	; 0x3c
 800766e:	3304      	adds	r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4a26      	ldr	r2, [pc, #152]	; (8007710 <USB_EP0_OutStart+0xb8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d90a      	bls.n	8007692 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800768c:	d101      	bne.n	8007692 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	e037      	b.n	8007702 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007698:	461a      	mov	r2, r3
 800769a:	2300      	movs	r3, #0
 800769c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c0:	f043 0318 	orr.w	r3, r3, #24
 80076c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80076d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d10f      	bne.n	8007700 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	4f54300a 	.word	0x4f54300a

08007714 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4a13      	ldr	r2, [pc, #76]	; (8007778 <USB_CoreReset+0x64>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d901      	bls.n	8007732 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e01b      	b.n	800776a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	daf2      	bge.n	8007720 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f043 0201 	orr.w	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a09      	ldr	r2, [pc, #36]	; (8007778 <USB_CoreReset+0x64>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d901      	bls.n	800775c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e006      	b.n	800776a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b01      	cmp	r3, #1
 8007766:	d0f0      	beq.n	800774a <USB_CoreReset+0x36>

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	00030d40 	.word	0x00030d40

0800777c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007788:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800778c:	f002 fcd4 	bl	800a138 <USBD_static_malloc>
 8007790:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	32b0      	adds	r2, #176	; 0xb0
 80077a2:	2100      	movs	r1, #0
 80077a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80077a8:	2302      	movs	r3, #2
 80077aa:	e0d4      	b.n	8007956 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80077ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80077b0:	2100      	movs	r1, #0
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f002 fd28 	bl	800a208 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	32b0      	adds	r2, #176	; 0xb0
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32b0      	adds	r2, #176	; 0xb0
 80077d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	7c1b      	ldrb	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d138      	bne.n	8007856 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077e4:	4b5e      	ldr	r3, [pc, #376]	; (8007960 <USBD_CDC_Init+0x1e4>)
 80077e6:	7819      	ldrb	r1, [r3, #0]
 80077e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ec:	2202      	movs	r2, #2
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f002 fb31 	bl	8009e56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077f4:	4b5a      	ldr	r3, [pc, #360]	; (8007960 <USBD_CDC_Init+0x1e4>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 020f 	and.w	r2, r3, #15
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	440b      	add	r3, r1
 8007808:	3324      	adds	r3, #36	; 0x24
 800780a:	2201      	movs	r2, #1
 800780c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800780e:	4b55      	ldr	r3, [pc, #340]	; (8007964 <USBD_CDC_Init+0x1e8>)
 8007810:	7819      	ldrb	r1, [r3, #0]
 8007812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007816:	2202      	movs	r2, #2
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f002 fb1c 	bl	8009e56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800781e:	4b51      	ldr	r3, [pc, #324]	; (8007964 <USBD_CDC_Init+0x1e8>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f003 020f 	and.w	r2, r3, #15
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007836:	2201      	movs	r2, #1
 8007838:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800783a:	4b4b      	ldr	r3, [pc, #300]	; (8007968 <USBD_CDC_Init+0x1ec>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f003 020f 	and.w	r2, r3, #15
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	440b      	add	r3, r1
 800784e:	3326      	adds	r3, #38	; 0x26
 8007850:	2210      	movs	r2, #16
 8007852:	801a      	strh	r2, [r3, #0]
 8007854:	e035      	b.n	80078c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007856:	4b42      	ldr	r3, [pc, #264]	; (8007960 <USBD_CDC_Init+0x1e4>)
 8007858:	7819      	ldrb	r1, [r3, #0]
 800785a:	2340      	movs	r3, #64	; 0x40
 800785c:	2202      	movs	r2, #2
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f002 faf9 	bl	8009e56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007864:	4b3e      	ldr	r3, [pc, #248]	; (8007960 <USBD_CDC_Init+0x1e4>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 020f 	and.w	r2, r3, #15
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	4613      	mov	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	3324      	adds	r3, #36	; 0x24
 800787a:	2201      	movs	r2, #1
 800787c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800787e:	4b39      	ldr	r3, [pc, #228]	; (8007964 <USBD_CDC_Init+0x1e8>)
 8007880:	7819      	ldrb	r1, [r3, #0]
 8007882:	2340      	movs	r3, #64	; 0x40
 8007884:	2202      	movs	r2, #2
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f002 fae5 	bl	8009e56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800788c:	4b35      	ldr	r3, [pc, #212]	; (8007964 <USBD_CDC_Init+0x1e8>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078a4:	2201      	movs	r2, #1
 80078a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078a8:	4b2f      	ldr	r3, [pc, #188]	; (8007968 <USBD_CDC_Init+0x1ec>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	3326      	adds	r3, #38	; 0x26
 80078be:	2210      	movs	r2, #16
 80078c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078c2:	4b29      	ldr	r3, [pc, #164]	; (8007968 <USBD_CDC_Init+0x1ec>)
 80078c4:	7819      	ldrb	r1, [r3, #0]
 80078c6:	2308      	movs	r3, #8
 80078c8:	2203      	movs	r2, #3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f002 fac3 	bl	8009e56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80078d0:	4b25      	ldr	r3, [pc, #148]	; (8007968 <USBD_CDC_Init+0x1ec>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	f003 020f 	and.w	r2, r3, #15
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	440b      	add	r3, r1
 80078e4:	3324      	adds	r3, #36	; 0x24
 80078e6:	2201      	movs	r2, #1
 80078e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	33b0      	adds	r3, #176	; 0xb0
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007920:	2302      	movs	r3, #2
 8007922:	e018      	b.n	8007956 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	7c1b      	ldrb	r3, [r3, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800792c:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <USBD_CDC_Init+0x1e8>)
 800792e:	7819      	ldrb	r1, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f002 fb7a 	bl	800a034 <USBD_LL_PrepareReceive>
 8007940:	e008      	b.n	8007954 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <USBD_CDC_Init+0x1e8>)
 8007944:	7819      	ldrb	r1, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f002 fb70 	bl	800a034 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000093 	.word	0x20000093
 8007964:	20000094 	.word	0x20000094
 8007968:	20000095 	.word	0x20000095

0800796c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007978:	4b3a      	ldr	r3, [pc, #232]	; (8007a64 <USBD_CDC_DeInit+0xf8>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f002 fa8f 	bl	8009ea2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007984:	4b37      	ldr	r3, [pc, #220]	; (8007a64 <USBD_CDC_DeInit+0xf8>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	f003 020f 	and.w	r2, r3, #15
 800798c:	6879      	ldr	r1, [r7, #4]
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	440b      	add	r3, r1
 8007998:	3324      	adds	r3, #36	; 0x24
 800799a:	2200      	movs	r2, #0
 800799c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800799e:	4b32      	ldr	r3, [pc, #200]	; (8007a68 <USBD_CDC_DeInit+0xfc>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f002 fa7c 	bl	8009ea2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80079aa:	4b2f      	ldr	r3, [pc, #188]	; (8007a68 <USBD_CDC_DeInit+0xfc>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079c2:	2200      	movs	r2, #0
 80079c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80079c6:	4b29      	ldr	r3, [pc, #164]	; (8007a6c <USBD_CDC_DeInit+0x100>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f002 fa68 	bl	8009ea2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80079d2:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <USBD_CDC_DeInit+0x100>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	f003 020f 	and.w	r2, r3, #15
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	440b      	add	r3, r1
 80079e6:	3324      	adds	r3, #36	; 0x24
 80079e8:	2200      	movs	r2, #0
 80079ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079ec:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <USBD_CDC_DeInit+0x100>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 020f 	and.w	r2, r3, #15
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	3326      	adds	r3, #38	; 0x26
 8007a02:	2200      	movs	r2, #0
 8007a04:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	32b0      	adds	r2, #176	; 0xb0
 8007a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01f      	beq.n	8007a58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	33b0      	adds	r3, #176	; 0xb0
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	32b0      	adds	r2, #176	; 0xb0
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f002 fb8a 	bl	800a154 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	32b0      	adds	r2, #176	; 0xb0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000093 	.word	0x20000093
 8007a68:	20000094 	.word	0x20000094
 8007a6c:	20000095 	.word	0x20000095

08007a70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	32b0      	adds	r2, #176	; 0xb0
 8007a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e0bf      	b.n	8007c20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d050      	beq.n	8007b4e <USBD_CDC_Setup+0xde>
 8007aac:	2b20      	cmp	r3, #32
 8007aae:	f040 80af 	bne.w	8007c10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	88db      	ldrh	r3, [r3, #6]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d03a      	beq.n	8007b30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b25b      	sxtb	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	da1b      	bge.n	8007afc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	33b0      	adds	r3, #176	; 0xb0
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ada:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	88d2      	ldrh	r2, [r2, #6]
 8007ae0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88db      	ldrh	r3, [r3, #6]
 8007ae6:	2b07      	cmp	r3, #7
 8007ae8:	bf28      	it	cs
 8007aea:	2307      	movcs	r3, #7
 8007aec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	89fa      	ldrh	r2, [r7, #14]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 fd6d 	bl	80095d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007afa:	e090      	b.n	8007c1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	785a      	ldrb	r2, [r3, #1]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	88db      	ldrh	r3, [r3, #6]
 8007b0a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b0c:	d803      	bhi.n	8007b16 <USBD_CDC_Setup+0xa6>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	88db      	ldrh	r3, [r3, #6]
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	e000      	b.n	8007b18 <USBD_CDC_Setup+0xa8>
 8007b16:	2240      	movs	r2, #64	; 0x40
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b1e:	6939      	ldr	r1, [r7, #16]
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007b26:	461a      	mov	r2, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fd7f 	bl	800962c <USBD_CtlPrepareRx>
      break;
 8007b2e:	e076      	b.n	8007c1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	33b0      	adds	r3, #176	; 0xb0
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	7850      	ldrb	r0, [r2, #1]
 8007b46:	2200      	movs	r2, #0
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	4798      	blx	r3
      break;
 8007b4c:	e067      	b.n	8007c1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b0b      	cmp	r3, #11
 8007b54:	d851      	bhi.n	8007bfa <USBD_CDC_Setup+0x18a>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <USBD_CDC_Setup+0xec>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b8d 	.word	0x08007b8d
 8007b60:	08007c09 	.word	0x08007c09
 8007b64:	08007bfb 	.word	0x08007bfb
 8007b68:	08007bfb 	.word	0x08007bfb
 8007b6c:	08007bfb 	.word	0x08007bfb
 8007b70:	08007bfb 	.word	0x08007bfb
 8007b74:	08007bfb 	.word	0x08007bfb
 8007b78:	08007bfb 	.word	0x08007bfb
 8007b7c:	08007bfb 	.word	0x08007bfb
 8007b80:	08007bfb 	.word	0x08007bfb
 8007b84:	08007bb7 	.word	0x08007bb7
 8007b88:	08007be1 	.word	0x08007be1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d107      	bne.n	8007ba8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b98:	f107 030a 	add.w	r3, r7, #10
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 fd17 	bl	80095d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ba6:	e032      	b.n	8007c0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 fca1 	bl	80094f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb4:	e02b      	b.n	8007c0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d107      	bne.n	8007bd2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bc2:	f107 030d 	add.w	r3, r7, #13
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 fd02 	bl	80095d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bd0:	e01d      	b.n	8007c0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 fc8c 	bl	80094f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	75fb      	strb	r3, [r7, #23]
          break;
 8007bde:	e016      	b.n	8007c0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d00f      	beq.n	8007c0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 fc7f 	bl	80094f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bf8:	e008      	b.n	8007c0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 fc78 	bl	80094f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	75fb      	strb	r3, [r7, #23]
          break;
 8007c06:	e002      	b.n	8007c0e <USBD_CDC_Setup+0x19e>
          break;
 8007c08:	bf00      	nop
 8007c0a:	e008      	b.n	8007c1e <USBD_CDC_Setup+0x1ae>
          break;
 8007c0c:	bf00      	nop
      }
      break;
 8007c0e:	e006      	b.n	8007c1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fc6d 	bl	80094f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	32b0      	adds	r2, #176	; 0xb0
 8007c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e065      	b.n	8007d1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	32b0      	adds	r2, #176	; 0xb0
 8007c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	f003 020f 	and.w	r2, r3, #15
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	3318      	adds	r3, #24
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d02f      	beq.n	8007cdc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	f003 020f 	and.w	r2, r3, #15
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3318      	adds	r3, #24
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	f003 010f 	and.w	r1, r3, #15
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	440b      	add	r3, r1
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4403      	add	r3, r0
 8007ca4:	3348      	adds	r3, #72	; 0x48
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d112      	bne.n	8007cdc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	f003 020f 	and.w	r2, r3, #15
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	3318      	adds	r3, #24
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cce:	78f9      	ldrb	r1, [r7, #3]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f002 f98c 	bl	8009ff2 <USBD_LL_Transmit>
 8007cda:	e01f      	b.n	8007d1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	33b0      	adds	r3, #176	; 0xb0
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d010      	beq.n	8007d1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	33b0      	adds	r3, #176	; 0xb0
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d18:	78fa      	ldrb	r2, [r7, #3]
 8007d1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	32b0      	adds	r2, #176	; 0xb0
 8007d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	32b0      	adds	r2, #176	; 0xb0
 8007d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e01a      	b.n	8007d8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f002 f98a 	bl	800a076 <USBD_LL_GetRxDataSize>
 8007d62:	4602      	mov	r2, r0
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	33b0      	adds	r3, #176	; 0xb0
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d88:	4611      	mov	r1, r2
 8007d8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	32b0      	adds	r2, #176	; 0xb0
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e025      	b.n	8007e04 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	33b0      	adds	r3, #176	; 0xb0
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01a      	beq.n	8007e02 <USBD_CDC_EP0_RxReady+0x6c>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007dd2:	2bff      	cmp	r3, #255	; 0xff
 8007dd4:	d015      	beq.n	8007e02 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	33b0      	adds	r3, #176	; 0xb0
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007dee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007df6:	b292      	uxth	r2, r2
 8007df8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	22ff      	movs	r2, #255	; 0xff
 8007dfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e14:	2182      	movs	r1, #130	; 0x82
 8007e16:	4818      	ldr	r0, [pc, #96]	; (8007e78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e18:	f000 fd09 	bl	800882e <USBD_GetEpDesc>
 8007e1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e1e:	2101      	movs	r1, #1
 8007e20:	4815      	ldr	r0, [pc, #84]	; (8007e78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e22:	f000 fd04 	bl	800882e <USBD_GetEpDesc>
 8007e26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e28:	2181      	movs	r1, #129	; 0x81
 8007e2a:	4813      	ldr	r0, [pc, #76]	; (8007e78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e2c:	f000 fcff 	bl	800882e <USBD_GetEpDesc>
 8007e30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2210      	movs	r2, #16
 8007e3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d006      	beq.n	8007e52 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e4c:	711a      	strb	r2, [r3, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d006      	beq.n	8007e66 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e60:	711a      	strb	r2, [r3, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2243      	movs	r2, #67	; 0x43
 8007e6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e6c:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000050 	.word	0x20000050

08007e7c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e84:	2182      	movs	r1, #130	; 0x82
 8007e86:	4818      	ldr	r0, [pc, #96]	; (8007ee8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e88:	f000 fcd1 	bl	800882e <USBD_GetEpDesc>
 8007e8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4815      	ldr	r0, [pc, #84]	; (8007ee8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e92:	f000 fccc 	bl	800882e <USBD_GetEpDesc>
 8007e96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e98:	2181      	movs	r1, #129	; 0x81
 8007e9a:	4813      	ldr	r0, [pc, #76]	; (8007ee8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e9c:	f000 fcc7 	bl	800882e <USBD_GetEpDesc>
 8007ea0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2210      	movs	r2, #16
 8007eac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d006      	beq.n	8007ec2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	711a      	strb	r2, [r3, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f042 0202 	orr.w	r2, r2, #2
 8007ec0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d006      	beq.n	8007ed6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	711a      	strb	r2, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f042 0202 	orr.w	r2, r2, #2
 8007ed4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2243      	movs	r2, #67	; 0x43
 8007eda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007edc:	4b02      	ldr	r3, [pc, #8]	; (8007ee8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000050 	.word	0x20000050

08007eec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ef4:	2182      	movs	r1, #130	; 0x82
 8007ef6:	4818      	ldr	r0, [pc, #96]	; (8007f58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ef8:	f000 fc99 	bl	800882e <USBD_GetEpDesc>
 8007efc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007efe:	2101      	movs	r1, #1
 8007f00:	4815      	ldr	r0, [pc, #84]	; (8007f58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f02:	f000 fc94 	bl	800882e <USBD_GetEpDesc>
 8007f06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f08:	2181      	movs	r1, #129	; 0x81
 8007f0a:	4813      	ldr	r0, [pc, #76]	; (8007f58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f0c:	f000 fc8f 	bl	800882e <USBD_GetEpDesc>
 8007f10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2210      	movs	r2, #16
 8007f1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f2c:	711a      	strb	r2, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d006      	beq.n	8007f46 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f40:	711a      	strb	r2, [r3, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2243      	movs	r2, #67	; 0x43
 8007f4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000050 	.word	0x20000050

08007f5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	220a      	movs	r2, #10
 8007f68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f6a:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	2000000c 	.word	0x2000000c

08007f7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e009      	b.n	8007fa4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	33b0      	adds	r3, #176	; 0xb0
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	32b0      	adds	r2, #176	; 0xb0
 8007fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e008      	b.n	8007fe8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	32b0      	adds	r2, #176	; 0xb0
 8008008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	e004      	b.n	8008022 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	32b0      	adds	r2, #176	; 0xb0
 8008042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008046:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	32b0      	adds	r2, #176	; 0xb0
 8008052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	e018      	b.n	8008090 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7c1b      	ldrb	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10a      	bne.n	800807c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <USBD_CDC_ReceivePacket+0x68>)
 8008068:	7819      	ldrb	r1, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 ffdd 	bl	800a034 <USBD_LL_PrepareReceive>
 800807a:	e008      	b.n	800808e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <USBD_CDC_ReceivePacket+0x68>)
 800807e:	7819      	ldrb	r1, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008086:	2340      	movs	r3, #64	; 0x40
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 ffd3 	bl	800a034 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000094 	.word	0x20000094

0800809c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	4613      	mov	r3, r2
 80080a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e01f      	b.n	80080f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	79fa      	ldrb	r2, [r7, #7]
 80080e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f001 fe4d 	bl	8009d88 <USBD_LL_Init>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	e025      	b.n	8008160 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	32ae      	adds	r2, #174	; 0xae
 8008126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00f      	beq.n	8008150 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32ae      	adds	r2, #174	; 0xae
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	f107 020e 	add.w	r2, r7, #14
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	4602      	mov	r2, r0
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 fe55 	bl	8009e20 <USBD_LL_Start>
 8008176:	4603      	mov	r3, r0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d009      	beq.n	80081c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	4611      	mov	r1, r2
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	4798      	blx	r3
 80081c0:	4603      	mov	r3, r0
 80081c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	4618      	mov	r0, r3
 8008216:	f001 f932 	bl	800947e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008228:	461a      	mov	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008236:	f003 031f 	and.w	r3, r3, #31
 800823a:	2b02      	cmp	r3, #2
 800823c:	d01a      	beq.n	8008274 <USBD_LL_SetupStage+0x72>
 800823e:	2b02      	cmp	r3, #2
 8008240:	d822      	bhi.n	8008288 <USBD_LL_SetupStage+0x86>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <USBD_LL_SetupStage+0x4a>
 8008246:	2b01      	cmp	r3, #1
 8008248:	d00a      	beq.n	8008260 <USBD_LL_SetupStage+0x5e>
 800824a:	e01d      	b.n	8008288 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb5f 	bl	8008918 <USBD_StdDevReq>
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
      break;
 800825e:	e020      	b.n	80082a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fbc7 	bl	80089fc <USBD_StdItfReq>
 800826e:	4603      	mov	r3, r0
 8008270:	73fb      	strb	r3, [r7, #15]
      break;
 8008272:	e016      	b.n	80082a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fc29 	bl	8008ad4 <USBD_StdEPReq>
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]
      break;
 8008286:	e00c      	b.n	80082a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800828e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008292:	b2db      	uxtb	r3, r3
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 fe22 	bl	8009ee0 <USBD_LL_StallEP>
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
      break;
 80082a0:	bf00      	nop
  }

  return ret;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	460b      	mov	r3, r1
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d16e      	bne.n	80083a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	f040 8098 	bne.w	8008408 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d913      	bls.n	800830c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	1ad2      	subs	r2, r2, r3
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	4293      	cmp	r3, r2
 80082fc:	bf28      	it	cs
 80082fe:	4613      	movcs	r3, r2
 8008300:	461a      	mov	r2, r3
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f001 f9ae 	bl	8009666 <USBD_CtlContinueRx>
 800830a:	e07d      	b.n	8008408 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008312:	f003 031f 	and.w	r3, r3, #31
 8008316:	2b02      	cmp	r3, #2
 8008318:	d014      	beq.n	8008344 <USBD_LL_DataOutStage+0x98>
 800831a:	2b02      	cmp	r3, #2
 800831c:	d81d      	bhi.n	800835a <USBD_LL_DataOutStage+0xae>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <USBD_LL_DataOutStage+0x7c>
 8008322:	2b01      	cmp	r3, #1
 8008324:	d003      	beq.n	800832e <USBD_LL_DataOutStage+0x82>
 8008326:	e018      	b.n	800835a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008328:	2300      	movs	r3, #0
 800832a:	75bb      	strb	r3, [r7, #22]
            break;
 800832c:	e018      	b.n	8008360 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008334:	b2db      	uxtb	r3, r3
 8008336:	4619      	mov	r1, r3
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fa5e 	bl	80087fa <USBD_CoreFindIF>
 800833e:	4603      	mov	r3, r0
 8008340:	75bb      	strb	r3, [r7, #22]
            break;
 8008342:	e00d      	b.n	8008360 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800834a:	b2db      	uxtb	r3, r3
 800834c:	4619      	mov	r1, r3
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fa60 	bl	8008814 <USBD_CoreFindEP>
 8008354:	4603      	mov	r3, r0
 8008356:	75bb      	strb	r3, [r7, #22]
            break;
 8008358:	e002      	b.n	8008360 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	75bb      	strb	r3, [r7, #22]
            break;
 800835e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008360:	7dbb      	ldrb	r3, [r7, #22]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d119      	bne.n	800839a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b03      	cmp	r3, #3
 8008370:	d113      	bne.n	800839a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008372:	7dba      	ldrb	r2, [r7, #22]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	32ae      	adds	r2, #174	; 0xae
 8008378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008382:	7dba      	ldrb	r2, [r7, #22]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800838a:	7dba      	ldrb	r2, [r7, #22]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	32ae      	adds	r2, #174	; 0xae
 8008390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f001 f974 	bl	8009688 <USBD_CtlSendStatus>
 80083a0:	e032      	b.n	8008408 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	4619      	mov	r1, r3
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fa31 	bl	8008814 <USBD_CoreFindEP>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083b6:	7dbb      	ldrb	r3, [r7, #22]
 80083b8:	2bff      	cmp	r3, #255	; 0xff
 80083ba:	d025      	beq.n	8008408 <USBD_LL_DataOutStage+0x15c>
 80083bc:	7dbb      	ldrb	r3, [r7, #22]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d122      	bne.n	8008408 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d117      	bne.n	80083fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80083ce:	7dba      	ldrb	r2, [r7, #22]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	32ae      	adds	r2, #174	; 0xae
 80083d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00f      	beq.n	80083fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80083de:	7dba      	ldrb	r2, [r7, #22]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80083e6:	7dba      	ldrb	r2, [r7, #22]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	32ae      	adds	r2, #174	; 0xae
 80083ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	7afa      	ldrb	r2, [r7, #11]
 80083f4:	4611      	mov	r1, r2
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	4798      	blx	r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	e000      	b.n	800840a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	460b      	mov	r3, r1
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d16f      	bne.n	8008506 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3314      	adds	r3, #20
 800842a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008432:	2b02      	cmp	r3, #2
 8008434:	d15a      	bne.n	80084ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	429a      	cmp	r2, r3
 8008440:	d914      	bls.n	800846c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	461a      	mov	r2, r3
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f001 f8d6 	bl	800960a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800845e:	2300      	movs	r3, #0
 8008460:	2200      	movs	r2, #0
 8008462:	2100      	movs	r1, #0
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f001 fde5 	bl	800a034 <USBD_LL_PrepareReceive>
 800846a:	e03f      	b.n	80084ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	429a      	cmp	r2, r3
 8008476:	d11c      	bne.n	80084b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008480:	429a      	cmp	r2, r3
 8008482:	d316      	bcc.n	80084b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800848e:	429a      	cmp	r2, r3
 8008490:	d20f      	bcs.n	80084b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008492:	2200      	movs	r2, #0
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f001 f8b7 	bl	800960a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084a4:	2300      	movs	r3, #0
 80084a6:	2200      	movs	r2, #0
 80084a8:	2100      	movs	r1, #0
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f001 fdc2 	bl	800a034 <USBD_LL_PrepareReceive>
 80084b0:	e01c      	b.n	80084ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d10f      	bne.n	80084de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f001 fcfd 	bl	8009ee0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f001 f8e1 	bl	80096ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d03a      	beq.n	800856c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fe42 	bl	8008180 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008504:	e032      	b.n	800856c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f97f 	bl	8008814 <USBD_CoreFindEP>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	2bff      	cmp	r3, #255	; 0xff
 800851e:	d025      	beq.n	800856c <USBD_LL_DataInStage+0x15a>
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d122      	bne.n	800856c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b03      	cmp	r3, #3
 8008530:	d11c      	bne.n	800856c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008532:	7dfa      	ldrb	r2, [r7, #23]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	32ae      	adds	r2, #174	; 0xae
 8008538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d014      	beq.n	800856c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008542:	7dfa      	ldrb	r2, [r7, #23]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800854a:	7dfa      	ldrb	r2, [r7, #23]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	32ae      	adds	r2, #174	; 0xae
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	7afa      	ldrb	r2, [r7, #11]
 8008558:	4611      	mov	r1, r2
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	4798      	blx	r3
 800855e:	4603      	mov	r3, r0
 8008560:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008562:	7dbb      	ldrb	r3, [r7, #22]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008568:	7dbb      	ldrb	r3, [r7, #22]
 800856a:	e000      	b.n	800856e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d014      	beq.n	80085dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00e      	beq.n	80085dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	6852      	ldr	r2, [r2, #4]
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	4611      	mov	r1, r2
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80085d8:	2303      	movs	r3, #3
 80085da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fc37 	bl	8009e56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2240      	movs	r2, #64	; 0x40
 80085f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f8:	2340      	movs	r3, #64	; 0x40
 80085fa:	2200      	movs	r2, #0
 80085fc:	2180      	movs	r1, #128	; 0x80
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 fc29 	bl	8009e56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2240      	movs	r2, #64	; 0x40
 800860e:	621a      	str	r2, [r3, #32]

  return ret;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008648:	b2da      	uxtb	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2204      	movs	r2, #4
 8008654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b04      	cmp	r3, #4
 8008678:	d106      	bne.n	8008688 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008680:	b2da      	uxtb	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d110      	bne.n	80086cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	32ae      	adds	r2, #174	; 0xae
 80086ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e01c      	b.n	8008732 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b03      	cmp	r3, #3
 8008702:	d115      	bne.n	8008730 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	32ae      	adds	r2, #174	; 0xae
 800870e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00b      	beq.n	8008730 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	32ae      	adds	r2, #174	; 0xae
 8008722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	4611      	mov	r1, r2
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	32ae      	adds	r2, #174	; 0xae
 8008750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008758:	2303      	movs	r3, #3
 800875a:	e01c      	b.n	8008796 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b03      	cmp	r3, #3
 8008766:	d115      	bne.n	8008794 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	32ae      	adds	r2, #174	; 0xae
 8008772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	32ae      	adds	r2, #174	; 0xae
 8008786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	78fa      	ldrb	r2, [r7, #3]
 800878e:	4611      	mov	r1, r2
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00e      	beq.n	80087f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	6852      	ldr	r2, [r2, #4]
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	4611      	mov	r1, r2
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	460b      	mov	r3, r1
 8008804:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008806:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008820:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008822:	4618      	mov	r0, r3
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	460b      	mov	r3, r1
 8008838:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	429a      	cmp	r2, r3
 8008854:	d920      	bls.n	8008898 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800885e:	e013      	b.n	8008888 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008860:	f107 030a 	add.w	r3, r7, #10
 8008864:	4619      	mov	r1, r3
 8008866:	6978      	ldr	r0, [r7, #20]
 8008868:	f000 f81b 	bl	80088a2 <USBD_GetNextDesc>
 800886c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	2b05      	cmp	r3, #5
 8008874:	d108      	bne.n	8008888 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	789b      	ldrb	r3, [r3, #2]
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	429a      	cmp	r2, r3
 8008882:	d008      	beq.n	8008896 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	885b      	ldrh	r3, [r3, #2]
 800888c:	b29a      	uxth	r2, r3
 800888e:	897b      	ldrh	r3, [r7, #10]
 8008890:	429a      	cmp	r2, r3
 8008892:	d8e5      	bhi.n	8008860 <USBD_GetEpDesc+0x32>
 8008894:	e000      	b.n	8008898 <USBD_GetEpDesc+0x6a>
          break;
 8008896:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008898:	693b      	ldr	r3, [r7, #16]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b085      	sub	sp, #20
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	881a      	ldrh	r2, [r3, #0]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	4413      	add	r3, r2
 80088bc:	b29a      	uxth	r2, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4413      	add	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80088ce:	68fb      	ldr	r3, [r7, #12]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	3301      	adds	r3, #1
 80088f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088fa:	8a3b      	ldrh	r3, [r7, #16]
 80088fc:	021b      	lsls	r3, r3, #8
 80088fe:	b21a      	sxth	r2, r3
 8008900:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008904:	4313      	orrs	r3, r2
 8008906:	b21b      	sxth	r3, r3
 8008908:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800890a:	89fb      	ldrh	r3, [r7, #14]
}
 800890c:	4618      	mov	r0, r3
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800892e:	2b40      	cmp	r3, #64	; 0x40
 8008930:	d005      	beq.n	800893e <USBD_StdDevReq+0x26>
 8008932:	2b40      	cmp	r3, #64	; 0x40
 8008934:	d857      	bhi.n	80089e6 <USBD_StdDevReq+0xce>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00f      	beq.n	800895a <USBD_StdDevReq+0x42>
 800893a:	2b20      	cmp	r3, #32
 800893c:	d153      	bne.n	80089e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	32ae      	adds	r2, #174	; 0xae
 8008948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
      break;
 8008958:	e04a      	b.n	80089f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	2b09      	cmp	r3, #9
 8008960:	d83b      	bhi.n	80089da <USBD_StdDevReq+0xc2>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <USBD_StdDevReq+0x50>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	080089bd 	.word	0x080089bd
 800896c:	080089d1 	.word	0x080089d1
 8008970:	080089db 	.word	0x080089db
 8008974:	080089c7 	.word	0x080089c7
 8008978:	080089db 	.word	0x080089db
 800897c:	0800899b 	.word	0x0800899b
 8008980:	08008991 	.word	0x08008991
 8008984:	080089db 	.word	0x080089db
 8008988:	080089b3 	.word	0x080089b3
 800898c:	080089a5 	.word	0x080089a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa3c 	bl	8008e10 <USBD_GetDescriptor>
          break;
 8008998:	e024      	b.n	80089e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fbcb 	bl	8009138 <USBD_SetAddress>
          break;
 80089a2:	e01f      	b.n	80089e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fc0a 	bl	80091c0 <USBD_SetConfig>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]
          break;
 80089b0:	e018      	b.n	80089e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fcad 	bl	8009314 <USBD_GetConfig>
          break;
 80089ba:	e013      	b.n	80089e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fcde 	bl	8009380 <USBD_GetStatus>
          break;
 80089c4:	e00e      	b.n	80089e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fd0d 	bl	80093e8 <USBD_SetFeature>
          break;
 80089ce:	e009      	b.n	80089e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fd31 	bl	800943a <USBD_ClrFeature>
          break;
 80089d8:	e004      	b.n	80089e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fd88 	bl	80094f2 <USBD_CtlError>
          break;
 80089e2:	bf00      	nop
      }
      break;
 80089e4:	e004      	b.n	80089f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fd82 	bl	80094f2 <USBD_CtlError>
      break;
 80089ee:	bf00      	nop
  }

  return ret;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d005      	beq.n	8008a22 <USBD_StdItfReq+0x26>
 8008a16:	2b40      	cmp	r3, #64	; 0x40
 8008a18:	d852      	bhi.n	8008ac0 <USBD_StdItfReq+0xc4>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <USBD_StdItfReq+0x26>
 8008a1e:	2b20      	cmp	r3, #32
 8008a20:	d14e      	bne.n	8008ac0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d840      	bhi.n	8008ab2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	889b      	ldrh	r3, [r3, #4]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d836      	bhi.n	8008aa8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	889b      	ldrh	r3, [r3, #4]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff fed9 	bl	80087fa <USBD_CoreFindIF>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	2bff      	cmp	r3, #255	; 0xff
 8008a50:	d01d      	beq.n	8008a8e <USBD_StdItfReq+0x92>
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d11a      	bne.n	8008a8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a58:	7bba      	ldrb	r2, [r7, #14]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	32ae      	adds	r2, #174	; 0xae
 8008a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00f      	beq.n	8008a88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008a68:	7bba      	ldrb	r2, [r7, #14]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a70:	7bba      	ldrb	r2, [r7, #14]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	32ae      	adds	r2, #174	; 0xae
 8008a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	4798      	blx	r3
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a86:	e004      	b.n	8008a92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a8c:	e001      	b.n	8008a92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	88db      	ldrh	r3, [r3, #6]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d110      	bne.n	8008abc <USBD_StdItfReq+0xc0>
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10d      	bne.n	8008abc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fdf1 	bl	8009688 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008aa6:	e009      	b.n	8008abc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fd21 	bl	80094f2 <USBD_CtlError>
          break;
 8008ab0:	e004      	b.n	8008abc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fd1c 	bl	80094f2 <USBD_CtlError>
          break;
 8008aba:	e000      	b.n	8008abe <USBD_StdItfReq+0xc2>
          break;
 8008abc:	bf00      	nop
      }
      break;
 8008abe:	e004      	b.n	8008aca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fd15 	bl	80094f2 <USBD_CtlError>
      break;
 8008ac8:	bf00      	nop
  }

  return ret;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	889b      	ldrh	r3, [r3, #4]
 8008ae6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008af0:	2b40      	cmp	r3, #64	; 0x40
 8008af2:	d007      	beq.n	8008b04 <USBD_StdEPReq+0x30>
 8008af4:	2b40      	cmp	r3, #64	; 0x40
 8008af6:	f200 817f 	bhi.w	8008df8 <USBD_StdEPReq+0x324>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d02a      	beq.n	8008b54 <USBD_StdEPReq+0x80>
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	f040 817a 	bne.w	8008df8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff fe83 	bl	8008814 <USBD_CoreFindEP>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b12:	7b7b      	ldrb	r3, [r7, #13]
 8008b14:	2bff      	cmp	r3, #255	; 0xff
 8008b16:	f000 8174 	beq.w	8008e02 <USBD_StdEPReq+0x32e>
 8008b1a:	7b7b      	ldrb	r3, [r7, #13]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f040 8170 	bne.w	8008e02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b22:	7b7a      	ldrb	r2, [r7, #13]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b2a:	7b7a      	ldrb	r2, [r7, #13]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	32ae      	adds	r2, #174	; 0xae
 8008b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 8163 	beq.w	8008e02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b3c:	7b7a      	ldrb	r2, [r7, #13]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	32ae      	adds	r2, #174	; 0xae
 8008b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b52:	e156      	b.n	8008e02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d008      	beq.n	8008b6e <USBD_StdEPReq+0x9a>
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	f300 8145 	bgt.w	8008dec <USBD_StdEPReq+0x318>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 809b 	beq.w	8008c9e <USBD_StdEPReq+0x1ca>
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d03c      	beq.n	8008be6 <USBD_StdEPReq+0x112>
 8008b6c:	e13e      	b.n	8008dec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d002      	beq.n	8008b80 <USBD_StdEPReq+0xac>
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d016      	beq.n	8008bac <USBD_StdEPReq+0xd8>
 8008b7e:	e02c      	b.n	8008bda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00d      	beq.n	8008ba2 <USBD_StdEPReq+0xce>
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	2b80      	cmp	r3, #128	; 0x80
 8008b8a:	d00a      	beq.n	8008ba2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 f9a5 	bl	8009ee0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b96:	2180      	movs	r1, #128	; 0x80
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 f9a1 	bl	8009ee0 <USBD_LL_StallEP>
 8008b9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ba0:	e020      	b.n	8008be4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fca4 	bl	80094f2 <USBD_CtlError>
              break;
 8008baa:	e01b      	b.n	8008be4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	885b      	ldrh	r3, [r3, #2]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10e      	bne.n	8008bd2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00b      	beq.n	8008bd2 <USBD_StdEPReq+0xfe>
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	2b80      	cmp	r3, #128	; 0x80
 8008bbe:	d008      	beq.n	8008bd2 <USBD_StdEPReq+0xfe>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	88db      	ldrh	r3, [r3, #6]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d104      	bne.n	8008bd2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 f987 	bl	8009ee0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fd58 	bl	8009688 <USBD_CtlSendStatus>

              break;
 8008bd8:	e004      	b.n	8008be4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fc88 	bl	80094f2 <USBD_CtlError>
              break;
 8008be2:	bf00      	nop
          }
          break;
 8008be4:	e107      	b.n	8008df6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d002      	beq.n	8008bf8 <USBD_StdEPReq+0x124>
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d016      	beq.n	8008c24 <USBD_StdEPReq+0x150>
 8008bf6:	e04b      	b.n	8008c90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00d      	beq.n	8008c1a <USBD_StdEPReq+0x146>
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	2b80      	cmp	r3, #128	; 0x80
 8008c02:	d00a      	beq.n	8008c1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 f969 	bl	8009ee0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c0e:	2180      	movs	r1, #128	; 0x80
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f965 	bl	8009ee0 <USBD_LL_StallEP>
 8008c16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c18:	e040      	b.n	8008c9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fc68 	bl	80094f2 <USBD_CtlError>
              break;
 8008c22:	e03b      	b.n	8008c9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d136      	bne.n	8008c9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 f96f 	bl	8009f1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fd21 	bl	8009688 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fde2 	bl	8008814 <USBD_CoreFindEP>
 8008c50:	4603      	mov	r3, r0
 8008c52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c54:	7b7b      	ldrb	r3, [r7, #13]
 8008c56:	2bff      	cmp	r3, #255	; 0xff
 8008c58:	d01f      	beq.n	8008c9a <USBD_StdEPReq+0x1c6>
 8008c5a:	7b7b      	ldrb	r3, [r7, #13]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d11c      	bne.n	8008c9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008c60:	7b7a      	ldrb	r2, [r7, #13]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008c68:	7b7a      	ldrb	r2, [r7, #13]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	32ae      	adds	r2, #174	; 0xae
 8008c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d010      	beq.n	8008c9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c78:	7b7a      	ldrb	r2, [r7, #13]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	32ae      	adds	r2, #174	; 0xae
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	4798      	blx	r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c8e:	e004      	b.n	8008c9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fc2d 	bl	80094f2 <USBD_CtlError>
              break;
 8008c98:	e000      	b.n	8008c9c <USBD_StdEPReq+0x1c8>
              break;
 8008c9a:	bf00      	nop
          }
          break;
 8008c9c:	e0ab      	b.n	8008df6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d002      	beq.n	8008cb0 <USBD_StdEPReq+0x1dc>
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d032      	beq.n	8008d14 <USBD_StdEPReq+0x240>
 8008cae:	e097      	b.n	8008de0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d007      	beq.n	8008cc6 <USBD_StdEPReq+0x1f2>
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	2b80      	cmp	r3, #128	; 0x80
 8008cba:	d004      	beq.n	8008cc6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fc17 	bl	80094f2 <USBD_CtlError>
                break;
 8008cc4:	e091      	b.n	8008dea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	da0b      	bge.n	8008ce6 <USBD_StdEPReq+0x212>
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	3310      	adds	r3, #16
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	e00b      	b.n	8008cfe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fc61 	bl	80095d4 <USBD_CtlSendData>
              break;
 8008d12:	e06a      	b.n	8008dea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da11      	bge.n	8008d40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	f003 020f 	and.w	r2, r3, #15
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	3324      	adds	r3, #36	; 0x24
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d117      	bne.n	8008d66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fbda 	bl	80094f2 <USBD_CtlError>
                  break;
 8008d3e:	e054      	b.n	8008dea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	f003 020f 	and.w	r2, r3, #15
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	440b      	add	r3, r1
 8008d52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d104      	bne.n	8008d66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fbc7 	bl	80094f2 <USBD_CtlError>
                  break;
 8008d64:	e041      	b.n	8008dea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	da0b      	bge.n	8008d86 <USBD_StdEPReq+0x2b2>
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	3310      	adds	r3, #16
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	3304      	adds	r3, #4
 8008d84:	e00b      	b.n	8008d9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <USBD_StdEPReq+0x2d8>
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b80      	cmp	r3, #128	; 0x80
 8008daa:	d103      	bne.n	8008db4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	e00e      	b.n	8008dd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 f8cf 	bl	8009f5c <USBD_LL_IsStallEP>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	e002      	b.n	8008dd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fbfb 	bl	80095d4 <USBD_CtlSendData>
              break;
 8008dde:	e004      	b.n	8008dea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fb85 	bl	80094f2 <USBD_CtlError>
              break;
 8008de8:	bf00      	nop
          }
          break;
 8008dea:	e004      	b.n	8008df6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fb7f 	bl	80094f2 <USBD_CtlError>
          break;
 8008df4:	bf00      	nop
      }
      break;
 8008df6:	e005      	b.n	8008e04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fb79 	bl	80094f2 <USBD_CtlError>
      break;
 8008e00:	e000      	b.n	8008e04 <USBD_StdEPReq+0x330>
      break;
 8008e02:	bf00      	nop
  }

  return ret;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
	...

08008e10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	885b      	ldrh	r3, [r3, #2]
 8008e2a:	0a1b      	lsrs	r3, r3, #8
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	2b0e      	cmp	r3, #14
 8008e32:	f200 8152 	bhi.w	80090da <USBD_GetDescriptor+0x2ca>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <USBD_GetDescriptor+0x2c>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008ead 	.word	0x08008ead
 8008e40:	08008ec5 	.word	0x08008ec5
 8008e44:	08008f05 	.word	0x08008f05
 8008e48:	080090db 	.word	0x080090db
 8008e4c:	080090db 	.word	0x080090db
 8008e50:	0800907b 	.word	0x0800907b
 8008e54:	080090a7 	.word	0x080090a7
 8008e58:	080090db 	.word	0x080090db
 8008e5c:	080090db 	.word	0x080090db
 8008e60:	080090db 	.word	0x080090db
 8008e64:	080090db 	.word	0x080090db
 8008e68:	080090db 	.word	0x080090db
 8008e6c:	080090db 	.word	0x080090db
 8008e70:	080090db 	.word	0x080090db
 8008e74:	08008e79 	.word	0x08008e79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	7c12      	ldrb	r2, [r2, #16]
 8008e90:	f107 0108 	add.w	r1, r7, #8
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
 8008e98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e9a:	e126      	b.n	80090ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fb27 	bl	80094f2 <USBD_CtlError>
        err++;
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	72fb      	strb	r3, [r7, #11]
      break;
 8008eaa:	e11e      	b.n	80090ea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	7c12      	ldrb	r2, [r2, #16]
 8008eb8:	f107 0108 	add.w	r1, r7, #8
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4798      	blx	r3
 8008ec0:	60f8      	str	r0, [r7, #12]
      break;
 8008ec2:	e112      	b.n	80090ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	7c1b      	ldrb	r3, [r3, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10d      	bne.n	8008ee8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed4:	f107 0208 	add.w	r2, r7, #8
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ee6:	e100      	b.n	80090ea <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	f107 0208 	add.w	r2, r7, #8
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	2202      	movs	r2, #2
 8008f00:	701a      	strb	r2, [r3, #0]
      break;
 8008f02:	e0f2      	b.n	80090ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	885b      	ldrh	r3, [r3, #2]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	f200 80ac 	bhi.w	8009068 <USBD_GetDescriptor+0x258>
 8008f10:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <USBD_GetDescriptor+0x108>)
 8008f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f16:	bf00      	nop
 8008f18:	08008f31 	.word	0x08008f31
 8008f1c:	08008f65 	.word	0x08008f65
 8008f20:	08008f99 	.word	0x08008f99
 8008f24:	08008fcd 	.word	0x08008fcd
 8008f28:	08009001 	.word	0x08009001
 8008f2c:	08009035 	.word	0x08009035
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	7c12      	ldrb	r2, [r2, #16]
 8008f48:	f107 0108 	add.w	r1, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f52:	e091      	b.n	8009078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 facb 	bl	80094f2 <USBD_CtlError>
            err++;
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	72fb      	strb	r3, [r7, #11]
          break;
 8008f62:	e089      	b.n	8009078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	7c12      	ldrb	r2, [r2, #16]
 8008f7c:	f107 0108 	add.w	r1, r7, #8
 8008f80:	4610      	mov	r0, r2
 8008f82:	4798      	blx	r3
 8008f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f86:	e077      	b.n	8009078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fab1 	bl	80094f2 <USBD_CtlError>
            err++;
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	3301      	adds	r3, #1
 8008f94:	72fb      	strb	r3, [r7, #11]
          break;
 8008f96:	e06f      	b.n	8009078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00b      	beq.n	8008fbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	f107 0108 	add.w	r1, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fba:	e05d      	b.n	8009078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa97 	bl	80094f2 <USBD_CtlError>
            err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fca:	e055      	b.n	8009078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	7c12      	ldrb	r2, [r2, #16]
 8008fe4:	f107 0108 	add.w	r1, r7, #8
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4798      	blx	r3
 8008fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fee:	e043      	b.n	8009078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa7d 	bl	80094f2 <USBD_CtlError>
            err++;
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ffe:	e03b      	b.n	8009078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00b      	beq.n	8009024 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	7c12      	ldrb	r2, [r2, #16]
 8009018:	f107 0108 	add.w	r1, r7, #8
 800901c:	4610      	mov	r0, r2
 800901e:	4798      	blx	r3
 8009020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009022:	e029      	b.n	8009078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fa63 	bl	80094f2 <USBD_CtlError>
            err++;
 800902c:	7afb      	ldrb	r3, [r7, #11]
 800902e:	3301      	adds	r3, #1
 8009030:	72fb      	strb	r3, [r7, #11]
          break;
 8009032:	e021      	b.n	8009078 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00b      	beq.n	8009058 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	7c12      	ldrb	r2, [r2, #16]
 800904c:	f107 0108 	add.w	r1, r7, #8
 8009050:	4610      	mov	r0, r2
 8009052:	4798      	blx	r3
 8009054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009056:	e00f      	b.n	8009078 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa49 	bl	80094f2 <USBD_CtlError>
            err++;
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	3301      	adds	r3, #1
 8009064:	72fb      	strb	r3, [r7, #11]
          break;
 8009066:	e007      	b.n	8009078 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa41 	bl	80094f2 <USBD_CtlError>
          err++;
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	3301      	adds	r3, #1
 8009074:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009076:	bf00      	nop
      }
      break;
 8009078:	e037      	b.n	80090ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7c1b      	ldrb	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d109      	bne.n	8009096 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908a:	f107 0208 	add.w	r2, r7, #8
 800908e:	4610      	mov	r0, r2
 8009090:	4798      	blx	r3
 8009092:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009094:	e029      	b.n	80090ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa2a 	bl	80094f2 <USBD_CtlError>
        err++;
 800909e:	7afb      	ldrb	r3, [r7, #11]
 80090a0:	3301      	adds	r3, #1
 80090a2:	72fb      	strb	r3, [r7, #11]
      break;
 80090a4:	e021      	b.n	80090ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	7c1b      	ldrb	r3, [r3, #16]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10d      	bne.n	80090ca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	f107 0208 	add.w	r2, r7, #8
 80090ba:	4610      	mov	r0, r2
 80090bc:	4798      	blx	r3
 80090be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	2207      	movs	r2, #7
 80090c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090c8:	e00f      	b.n	80090ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa10 	bl	80094f2 <USBD_CtlError>
        err++;
 80090d2:	7afb      	ldrb	r3, [r7, #11]
 80090d4:	3301      	adds	r3, #1
 80090d6:	72fb      	strb	r3, [r7, #11]
      break;
 80090d8:	e007      	b.n	80090ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fa08 	bl	80094f2 <USBD_CtlError>
      err++;
 80090e2:	7afb      	ldrb	r3, [r7, #11]
 80090e4:	3301      	adds	r3, #1
 80090e6:	72fb      	strb	r3, [r7, #11]
      break;
 80090e8:	bf00      	nop
  }

  if (err != 0U)
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d11e      	bne.n	800912e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	88db      	ldrh	r3, [r3, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d016      	beq.n	8009126 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80090f8:	893b      	ldrh	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00e      	beq.n	800911c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	88da      	ldrh	r2, [r3, #6]
 8009102:	893b      	ldrh	r3, [r7, #8]
 8009104:	4293      	cmp	r3, r2
 8009106:	bf28      	it	cs
 8009108:	4613      	movcs	r3, r2
 800910a:	b29b      	uxth	r3, r3
 800910c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800910e:	893b      	ldrh	r3, [r7, #8]
 8009110:	461a      	mov	r2, r3
 8009112:	68f9      	ldr	r1, [r7, #12]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa5d 	bl	80095d4 <USBD_CtlSendData>
 800911a:	e009      	b.n	8009130 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f9e7 	bl	80094f2 <USBD_CtlError>
 8009124:	e004      	b.n	8009130 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 faae 	bl	8009688 <USBD_CtlSendStatus>
 800912c:	e000      	b.n	8009130 <USBD_GetDescriptor+0x320>
    return;
 800912e:	bf00      	nop
  }
}
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop

08009138 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	889b      	ldrh	r3, [r3, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d131      	bne.n	80091ae <USBD_SetAddress+0x76>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	88db      	ldrh	r3, [r3, #6]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d12d      	bne.n	80091ae <USBD_SetAddress+0x76>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	885b      	ldrh	r3, [r3, #2]
 8009156:	2b7f      	cmp	r3, #127	; 0x7f
 8009158:	d829      	bhi.n	80091ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	885b      	ldrh	r3, [r3, #2]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009164:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b03      	cmp	r3, #3
 8009170:	d104      	bne.n	800917c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f9bc 	bl	80094f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917a:	e01d      	b.n	80091b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7bfa      	ldrb	r2, [r7, #15]
 8009180:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 ff13 	bl	8009fb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fa7a 	bl	8009688 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a2:	e009      	b.n	80091b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ac:	e004      	b.n	80091b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f99e 	bl	80094f2 <USBD_CtlError>
  }
}
 80091b6:	bf00      	nop
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	885b      	ldrh	r3, [r3, #2]
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	4b4e      	ldr	r3, [pc, #312]	; (8009310 <USBD_SetConfig+0x150>)
 80091d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091d8:	4b4d      	ldr	r3, [pc, #308]	; (8009310 <USBD_SetConfig+0x150>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d905      	bls.n	80091ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f985 	bl	80094f2 <USBD_CtlError>
    return USBD_FAIL;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e08c      	b.n	8009306 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d002      	beq.n	80091fe <USBD_SetConfig+0x3e>
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d029      	beq.n	8009250 <USBD_SetConfig+0x90>
 80091fc:	e075      	b.n	80092ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80091fe:	4b44      	ldr	r3, [pc, #272]	; (8009310 <USBD_SetConfig+0x150>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d020      	beq.n	8009248 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009206:	4b42      	ldr	r3, [pc, #264]	; (8009310 <USBD_SetConfig+0x150>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009210:	4b3f      	ldr	r3, [pc, #252]	; (8009310 <USBD_SetConfig+0x150>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7fe ffbd 	bl	8008196 <USBD_SetClassConfig>
 800921c:	4603      	mov	r3, r0
 800921e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d008      	beq.n	8009238 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f962 	bl	80094f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2202      	movs	r2, #2
 8009232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009236:	e065      	b.n	8009304 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa25 	bl	8009688 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2203      	movs	r2, #3
 8009242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009246:	e05d      	b.n	8009304 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fa1d 	bl	8009688 <USBD_CtlSendStatus>
      break;
 800924e:	e059      	b.n	8009304 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009250:	4b2f      	ldr	r3, [pc, #188]	; (8009310 <USBD_SetConfig+0x150>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d112      	bne.n	800927e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009260:	4b2b      	ldr	r3, [pc, #172]	; (8009310 <USBD_SetConfig+0x150>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800926a:	4b29      	ldr	r3, [pc, #164]	; (8009310 <USBD_SetConfig+0x150>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7fe ffac 	bl	80081ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fa06 	bl	8009688 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800927c:	e042      	b.n	8009304 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800927e:	4b24      	ldr	r3, [pc, #144]	; (8009310 <USBD_SetConfig+0x150>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	429a      	cmp	r2, r3
 800928a:	d02a      	beq.n	80092e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7fe ff9a 	bl	80081ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800929a:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <USBD_SetConfig+0x150>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092a4:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <USBD_SetConfig+0x150>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fe ff73 	bl	8008196 <USBD_SetClassConfig>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00f      	beq.n	80092da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f918 	bl	80094f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7fe ff7f 	bl	80081ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092d8:	e014      	b.n	8009304 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f9d4 	bl	8009688 <USBD_CtlSendStatus>
      break;
 80092e0:	e010      	b.n	8009304 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f9d0 	bl	8009688 <USBD_CtlSendStatus>
      break;
 80092e8:	e00c      	b.n	8009304 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f900 	bl	80094f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092f2:	4b07      	ldr	r3, [pc, #28]	; (8009310 <USBD_SetConfig+0x150>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7fe ff68 	bl	80081ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092fe:	2303      	movs	r3, #3
 8009300:	73fb      	strb	r3, [r7, #15]
      break;
 8009302:	bf00      	nop
  }

  return ret;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	200003d8 	.word	0x200003d8

08009314 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	88db      	ldrh	r3, [r3, #6]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d004      	beq.n	8009330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f8e2 	bl	80094f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800932e:	e023      	b.n	8009378 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	dc02      	bgt.n	8009342 <USBD_GetConfig+0x2e>
 800933c:	2b00      	cmp	r3, #0
 800933e:	dc03      	bgt.n	8009348 <USBD_GetConfig+0x34>
 8009340:	e015      	b.n	800936e <USBD_GetConfig+0x5a>
 8009342:	2b03      	cmp	r3, #3
 8009344:	d00b      	beq.n	800935e <USBD_GetConfig+0x4a>
 8009346:	e012      	b.n	800936e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3308      	adds	r3, #8
 8009352:	2201      	movs	r2, #1
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f93c 	bl	80095d4 <USBD_CtlSendData>
        break;
 800935c:	e00c      	b.n	8009378 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3304      	adds	r3, #4
 8009362:	2201      	movs	r2, #1
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f934 	bl	80095d4 <USBD_CtlSendData>
        break;
 800936c:	e004      	b.n	8009378 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f8be 	bl	80094f2 <USBD_CtlError>
        break;
 8009376:	bf00      	nop
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009390:	b2db      	uxtb	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	2b02      	cmp	r3, #2
 8009396:	d81e      	bhi.n	80093d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	88db      	ldrh	r3, [r3, #6]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d004      	beq.n	80093aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f8a5 	bl	80094f2 <USBD_CtlError>
        break;
 80093a8:	e01a      	b.n	80093e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f043 0202 	orr.w	r2, r3, #2
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	330c      	adds	r3, #12
 80093ca:	2202      	movs	r2, #2
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f900 	bl	80095d4 <USBD_CtlSendData>
      break;
 80093d4:	e004      	b.n	80093e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f88a 	bl	80094f2 <USBD_CtlError>
      break;
 80093de:	bf00      	nop
  }
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	885b      	ldrh	r3, [r3, #2]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d107      	bne.n	800940a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f940 	bl	8009688 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009408:	e013      	b.n	8009432 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	885b      	ldrh	r3, [r3, #2]
 800940e:	2b02      	cmp	r3, #2
 8009410:	d10b      	bne.n	800942a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	889b      	ldrh	r3, [r3, #4]
 8009416:	0a1b      	lsrs	r3, r3, #8
 8009418:	b29b      	uxth	r3, r3
 800941a:	b2da      	uxtb	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f930 	bl	8009688 <USBD_CtlSendStatus>
}
 8009428:	e003      	b.n	8009432 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f860 	bl	80094f2 <USBD_CtlError>
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944a:	b2db      	uxtb	r3, r3
 800944c:	3b01      	subs	r3, #1
 800944e:	2b02      	cmp	r3, #2
 8009450:	d80b      	bhi.n	800946a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	885b      	ldrh	r3, [r3, #2]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d10c      	bne.n	8009474 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f910 	bl	8009688 <USBD_CtlSendStatus>
      }
      break;
 8009468:	e004      	b.n	8009474 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f840 	bl	80094f2 <USBD_CtlError>
      break;
 8009472:	e000      	b.n	8009476 <USBD_ClrFeature+0x3c>
      break;
 8009474:	bf00      	nop
  }
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	781a      	ldrb	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3301      	adds	r3, #1
 8009498:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	781a      	ldrb	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3301      	adds	r3, #1
 80094a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f7ff fa17 	bl	80088dc <SWAPBYTE>
 80094ae:	4603      	mov	r3, r0
 80094b0:	461a      	mov	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3301      	adds	r3, #1
 80094ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3301      	adds	r3, #1
 80094c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff fa0a 	bl	80088dc <SWAPBYTE>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3301      	adds	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f7ff f9fd 	bl	80088dc <SWAPBYTE>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	80da      	strh	r2, [r3, #6]
}
 80094ea:	bf00      	nop
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094fc:	2180      	movs	r1, #128	; 0x80
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fcee 	bl	8009ee0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009504:	2100      	movs	r1, #0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fcea 	bl	8009ee0 <USBD_LL_StallEP>
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d036      	beq.n	8009598 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800952e:	6938      	ldr	r0, [r7, #16]
 8009530:	f000 f836 	bl	80095a0 <USBD_GetLen>
 8009534:	4603      	mov	r3, r0
 8009536:	3301      	adds	r3, #1
 8009538:	b29b      	uxth	r3, r3
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	b29a      	uxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009542:	7dfb      	ldrb	r3, [r7, #23]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4413      	add	r3, r2
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	701a      	strb	r2, [r3, #0]
  idx++;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	3301      	adds	r3, #1
 8009552:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	4413      	add	r3, r2
 800955a:	2203      	movs	r2, #3
 800955c:	701a      	strb	r2, [r3, #0]
  idx++;
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	3301      	adds	r3, #1
 8009562:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009564:	e013      	b.n	800958e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	4413      	add	r3, r2
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	7812      	ldrb	r2, [r2, #0]
 8009570:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	3301      	adds	r3, #1
 8009576:	613b      	str	r3, [r7, #16]
    idx++;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
 800957a:	3301      	adds	r3, #1
 800957c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	4413      	add	r3, r2
 8009584:	2200      	movs	r2, #0
 8009586:	701a      	strb	r2, [r3, #0]
    idx++;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	3301      	adds	r3, #1
 800958c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e7      	bne.n	8009566 <USBD_GetString+0x52>
 8009596:	e000      	b.n	800959a <USBD_GetString+0x86>
    return;
 8009598:	bf00      	nop
  }
}
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095b0:	e005      	b.n	80095be <USBD_GetLen+0x1e>
  {
    len++;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	3301      	adds	r3, #1
 80095b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	3301      	adds	r3, #1
 80095bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1f5      	bne.n	80095b2 <USBD_GetLen+0x12>
  }

  return len;
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2202      	movs	r2, #2
 80095e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	2100      	movs	r1, #0
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 fcf9 	bl	8009ff2 <USBD_LL_Transmit>

  return USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	60f8      	str	r0, [r7, #12]
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	2100      	movs	r1, #0
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fce8 	bl	8009ff2 <USBD_LL_Transmit>

  return USBD_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2203      	movs	r2, #3
 800963c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	2100      	movs	r1, #0
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 fcec 	bl	800a034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	60f8      	str	r0, [r7, #12]
 800966e:	60b9      	str	r1, [r7, #8]
 8009670:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	2100      	movs	r1, #0
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 fcdb 	bl	800a034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2204      	movs	r2, #4
 8009694:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009698:	2300      	movs	r3, #0
 800969a:	2200      	movs	r2, #0
 800969c:	2100      	movs	r1, #0
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fca7 	bl	8009ff2 <USBD_LL_Transmit>

  return USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2205      	movs	r2, #5
 80096ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096be:	2300      	movs	r3, #0
 80096c0:	2200      	movs	r2, #0
 80096c2:	2100      	movs	r1, #0
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fcb5 	bl	800a034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096d8:	2200      	movs	r2, #0
 80096da:	4912      	ldr	r1, [pc, #72]	; (8009724 <MX_USB_DEVICE_Init+0x50>)
 80096dc:	4812      	ldr	r0, [pc, #72]	; (8009728 <MX_USB_DEVICE_Init+0x54>)
 80096de:	f7fe fcdd 	bl	800809c <USBD_Init>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096e8:	f7f7 fb52 	bl	8000d90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096ec:	490f      	ldr	r1, [pc, #60]	; (800972c <MX_USB_DEVICE_Init+0x58>)
 80096ee:	480e      	ldr	r0, [pc, #56]	; (8009728 <MX_USB_DEVICE_Init+0x54>)
 80096f0:	f7fe fd04 	bl	80080fc <USBD_RegisterClass>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096fa:	f7f7 fb49 	bl	8000d90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096fe:	490c      	ldr	r1, [pc, #48]	; (8009730 <MX_USB_DEVICE_Init+0x5c>)
 8009700:	4809      	ldr	r0, [pc, #36]	; (8009728 <MX_USB_DEVICE_Init+0x54>)
 8009702:	f7fe fc3b 	bl	8007f7c <USBD_CDC_RegisterInterface>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800970c:	f7f7 fb40 	bl	8000d90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009710:	4805      	ldr	r0, [pc, #20]	; (8009728 <MX_USB_DEVICE_Init+0x54>)
 8009712:	f7fe fd29 	bl	8008168 <USBD_Start>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800971c:	f7f7 fb38 	bl	8000d90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009720:	bf00      	nop
 8009722:	bd80      	pop	{r7, pc}
 8009724:	200000ac 	.word	0x200000ac
 8009728:	200003dc 	.word	0x200003dc
 800972c:	20000018 	.word	0x20000018
 8009730:	20000098 	.word	0x20000098

08009734 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009738:	2200      	movs	r2, #0
 800973a:	4905      	ldr	r1, [pc, #20]	; (8009750 <CDC_Init_FS+0x1c>)
 800973c:	4805      	ldr	r0, [pc, #20]	; (8009754 <CDC_Init_FS+0x20>)
 800973e:	f7fe fc37 	bl	8007fb0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009742:	4905      	ldr	r1, [pc, #20]	; (8009758 <CDC_Init_FS+0x24>)
 8009744:	4803      	ldr	r0, [pc, #12]	; (8009754 <CDC_Init_FS+0x20>)
 8009746:	f7fe fc55 	bl	8007ff4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800974a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800974c:	4618      	mov	r0, r3
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20000eb8 	.word	0x20000eb8
 8009754:	200003dc 	.word	0x200003dc
 8009758:	200006b8 	.word	0x200006b8

0800975c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009760:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009762:	4618      	mov	r0, r3
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	4603      	mov	r3, r0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	71fb      	strb	r3, [r7, #7]
 8009778:	4613      	mov	r3, r2
 800977a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b23      	cmp	r3, #35	; 0x23
 8009780:	d84a      	bhi.n	8009818 <CDC_Control_FS+0xac>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <CDC_Control_FS+0x1c>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	08009819 	.word	0x08009819
 800978c:	08009819 	.word	0x08009819
 8009790:	08009819 	.word	0x08009819
 8009794:	08009819 	.word	0x08009819
 8009798:	08009819 	.word	0x08009819
 800979c:	08009819 	.word	0x08009819
 80097a0:	08009819 	.word	0x08009819
 80097a4:	08009819 	.word	0x08009819
 80097a8:	08009819 	.word	0x08009819
 80097ac:	08009819 	.word	0x08009819
 80097b0:	08009819 	.word	0x08009819
 80097b4:	08009819 	.word	0x08009819
 80097b8:	08009819 	.word	0x08009819
 80097bc:	08009819 	.word	0x08009819
 80097c0:	08009819 	.word	0x08009819
 80097c4:	08009819 	.word	0x08009819
 80097c8:	08009819 	.word	0x08009819
 80097cc:	08009819 	.word	0x08009819
 80097d0:	08009819 	.word	0x08009819
 80097d4:	08009819 	.word	0x08009819
 80097d8:	08009819 	.word	0x08009819
 80097dc:	08009819 	.word	0x08009819
 80097e0:	08009819 	.word	0x08009819
 80097e4:	08009819 	.word	0x08009819
 80097e8:	08009819 	.word	0x08009819
 80097ec:	08009819 	.word	0x08009819
 80097f0:	08009819 	.word	0x08009819
 80097f4:	08009819 	.word	0x08009819
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009819 	.word	0x08009819
 8009800:	08009819 	.word	0x08009819
 8009804:	08009819 	.word	0x08009819
 8009808:	08009819 	.word	0x08009819
 800980c:	08009819 	.word	0x08009819
 8009810:	08009819 	.word	0x08009819
 8009814:	08009819 	.word	0x08009819
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009818:	bf00      	nop
  }

  return (USBD_OK);
 800981a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	4805      	ldr	r0, [pc, #20]	; (800984c <CDC_Receive_FS+0x24>)
 8009836:	f7fe fbdd 	bl	8007ff4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800983a:	4804      	ldr	r0, [pc, #16]	; (800984c <CDC_Receive_FS+0x24>)
 800983c:	f7fe fbf8 	bl	8008030 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009840:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	200003dc 	.word	0x200003dc

08009850 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009866:	4618      	mov	r0, r3
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	6039      	str	r1, [r7, #0]
 800987e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2212      	movs	r2, #18
 8009884:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009886:	4b03      	ldr	r3, [pc, #12]	; (8009894 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	200000cc 	.word	0x200000cc

08009898 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	6039      	str	r1, [r7, #0]
 80098a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2204      	movs	r2, #4
 80098a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098aa:	4b03      	ldr	r3, [pc, #12]	; (80098b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	200000ec 	.word	0x200000ec

080098bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d105      	bne.n	80098da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4907      	ldr	r1, [pc, #28]	; (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098d2:	4808      	ldr	r0, [pc, #32]	; (80098f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098d4:	f7ff fe1e 	bl	8009514 <USBD_GetString>
 80098d8:	e004      	b.n	80098e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	4904      	ldr	r1, [pc, #16]	; (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098de:	4805      	ldr	r0, [pc, #20]	; (80098f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098e0:	f7ff fe18 	bl	8009514 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200016b8 	.word	0x200016b8
 80098f4:	0800a230 	.word	0x0800a230

080098f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	4904      	ldr	r1, [pc, #16]	; (8009918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009908:	4804      	ldr	r0, [pc, #16]	; (800991c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800990a:	f7ff fe03 	bl	8009514 <USBD_GetString>
  return USBD_StrDesc;
 800990e:	4b02      	ldr	r3, [pc, #8]	; (8009918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	200016b8 	.word	0x200016b8
 800991c:	0800a248 	.word	0x0800a248

08009920 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	221a      	movs	r2, #26
 8009930:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009932:	f000 f855 	bl	80099e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009936:	4b02      	ldr	r3, [pc, #8]	; (8009940 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	200000f0 	.word	0x200000f0

08009944 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4907      	ldr	r1, [pc, #28]	; (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
 800995a:	4808      	ldr	r0, [pc, #32]	; (800997c <USBD_FS_ConfigStrDescriptor+0x38>)
 800995c:	f7ff fdda 	bl	8009514 <USBD_GetString>
 8009960:	e004      	b.n	800996c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4904      	ldr	r1, [pc, #16]	; (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009966:	4805      	ldr	r0, [pc, #20]	; (800997c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009968:	f7ff fdd4 	bl	8009514 <USBD_GetString>
  }
  return USBD_StrDesc;
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200016b8 	.word	0x200016b8
 800997c:	0800a25c 	.word	0x0800a25c

08009980 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d105      	bne.n	800999e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	4907      	ldr	r1, [pc, #28]	; (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009996:	4808      	ldr	r0, [pc, #32]	; (80099b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009998:	f7ff fdbc 	bl	8009514 <USBD_GetString>
 800999c:	e004      	b.n	80099a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4904      	ldr	r1, [pc, #16]	; (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099a2:	4805      	ldr	r0, [pc, #20]	; (80099b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099a4:	f7ff fdb6 	bl	8009514 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	200016b8 	.word	0x200016b8
 80099b8:	0800a268 	.word	0x0800a268

080099bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	220c      	movs	r2, #12
 80099cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80099ce:	4b03      	ldr	r3, [pc, #12]	; (80099dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	200000e0 	.word	0x200000e0

080099e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099e6:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <Get_SerialNum+0x44>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099ec:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <Get_SerialNum+0x48>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099f2:	4b0e      	ldr	r3, [pc, #56]	; (8009a2c <Get_SerialNum+0x4c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a06:	2208      	movs	r2, #8
 8009a08:	4909      	ldr	r1, [pc, #36]	; (8009a30 <Get_SerialNum+0x50>)
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 f814 	bl	8009a38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a10:	2204      	movs	r2, #4
 8009a12:	4908      	ldr	r1, [pc, #32]	; (8009a34 <Get_SerialNum+0x54>)
 8009a14:	68b8      	ldr	r0, [r7, #8]
 8009a16:	f000 f80f 	bl	8009a38 <IntToUnicode>
  }
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	1fff7a10 	.word	0x1fff7a10
 8009a28:	1fff7a14 	.word	0x1fff7a14
 8009a2c:	1fff7a18 	.word	0x1fff7a18
 8009a30:	200000f2 	.word	0x200000f2
 8009a34:	20000102 	.word	0x20000102

08009a38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	75fb      	strb	r3, [r7, #23]
 8009a4e:	e027      	b.n	8009aa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	0f1b      	lsrs	r3, r3, #28
 8009a54:	2b09      	cmp	r3, #9
 8009a56:	d80b      	bhi.n	8009a70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	0f1b      	lsrs	r3, r3, #28
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	4619      	mov	r1, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	440b      	add	r3, r1
 8009a68:	3230      	adds	r2, #48	; 0x30
 8009a6a:	b2d2      	uxtb	r2, r2
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	e00a      	b.n	8009a86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	0f1b      	lsrs	r3, r3, #28
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	440b      	add	r3, r1
 8009a80:	3237      	adds	r2, #55	; 0x37
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	3301      	adds	r3, #1
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	4413      	add	r3, r2
 8009a96:	2200      	movs	r2, #0
 8009a98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	75fb      	strb	r3, [r7, #23]
 8009aa0:	7dfa      	ldrb	r2, [r7, #23]
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d3d3      	bcc.n	8009a50 <IntToUnicode+0x18>
  }
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	371c      	adds	r7, #28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
	...

08009ab8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b0a0      	sub	sp, #128	; 0x80
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ac0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	605a      	str	r2, [r3, #4]
 8009aca:	609a      	str	r2, [r3, #8]
 8009acc:	60da      	str	r2, [r3, #12]
 8009ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009ad0:	f107 0310 	add.w	r3, r7, #16
 8009ad4:	225c      	movs	r2, #92	; 0x5c
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 fb95 	bl	800a208 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ae6:	d154      	bne.n	8009b92 <HAL_PCD_MspInit+0xda>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8009aee:	2304      	movs	r3, #4
 8009af0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8009af2:	2360      	movs	r3, #96	; 0x60
 8009af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009af6:	2302      	movs	r3, #2
 8009af8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8009afa:	2304      	movs	r3, #4
 8009afc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009afe:	2301      	movs	r3, #1
 8009b00:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8009b02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b06:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7f9 ffb3 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8009b18:	f7f7 f93a 	bl	8000d90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	4b1e      	ldr	r3, [pc, #120]	; (8009b9c <HAL_PCD_MspInit+0xe4>)
 8009b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b24:	4a1d      	ldr	r2, [pc, #116]	; (8009b9c <HAL_PCD_MspInit+0xe4>)
 8009b26:	f043 0301 	orr.w	r3, r3, #1
 8009b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8009b2c:	4b1b      	ldr	r3, [pc, #108]	; (8009b9c <HAL_PCD_MspInit+0xe4>)
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b46:	2303      	movs	r3, #3
 8009b48:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009b52:	4619      	mov	r1, r3
 8009b54:	4812      	ldr	r0, [pc, #72]	; (8009ba0 <HAL_PCD_MspInit+0xe8>)
 8009b56:	f7f8 f869 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b5a:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <HAL_PCD_MspInit+0xe4>)
 8009b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5e:	4a0f      	ldr	r2, [pc, #60]	; (8009b9c <HAL_PCD_MspInit+0xe4>)
 8009b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b64:	6353      	str	r3, [r2, #52]	; 0x34
 8009b66:	2300      	movs	r3, #0
 8009b68:	60bb      	str	r3, [r7, #8]
 8009b6a:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <HAL_PCD_MspInit+0xe4>)
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	4a0b      	ldr	r2, [pc, #44]	; (8009b9c <HAL_PCD_MspInit+0xe4>)
 8009b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b74:	6453      	str	r3, [r2, #68]	; 0x44
 8009b76:	4b09      	ldr	r3, [pc, #36]	; (8009b9c <HAL_PCD_MspInit+0xe4>)
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b7e:	60bb      	str	r3, [r7, #8]
 8009b80:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b82:	2200      	movs	r2, #0
 8009b84:	2100      	movs	r1, #0
 8009b86:	2043      	movs	r0, #67	; 0x43
 8009b88:	f7f8 f819 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b8c:	2043      	movs	r0, #67	; 0x43
 8009b8e:	f7f8 f832 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b92:	bf00      	nop
 8009b94:	3780      	adds	r7, #128	; 0x80
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	40023800 	.word	0x40023800
 8009ba0:	40020000 	.word	0x40020000

08009ba4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fb21 	bl	8008202 <USBD_LL_SetupStage>
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009bda:	78fa      	ldrb	r2, [r7, #3]
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4613      	mov	r3, r2
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	440b      	add	r3, r1
 8009be8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f7fe fb5b 	bl	80082ac <USBD_LL_DataOutStage>
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c10:	78fa      	ldrb	r2, [r7, #3]
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	4613      	mov	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	440b      	add	r3, r1
 8009c1e:	334c      	adds	r3, #76	; 0x4c
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	4619      	mov	r1, r3
 8009c26:	f7fe fbf4 	bl	8008412 <USBD_LL_DataInStage>
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe fd28 	bl	8008696 <USBD_LL_SOF>
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c56:	2301      	movs	r3, #1
 8009c58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d102      	bne.n	8009c68 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
 8009c66:	e008      	b.n	8009c7a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d102      	bne.n	8009c76 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c70:	2301      	movs	r3, #1
 8009c72:	73fb      	strb	r3, [r7, #15]
 8009c74:	e001      	b.n	8009c7a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c76:	f7f7 f88b 	bl	8000d90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c80:	7bfa      	ldrb	r2, [r7, #15]
 8009c82:	4611      	mov	r1, r2
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe fcc8 	bl	800861a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fc70 	bl	8008576 <USBD_LL_Reset>
}
 8009c96:	bf00      	nop
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
	...

08009ca0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fcc3 	bl	800863a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6812      	ldr	r2, [r2, #0]
 8009cc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cc6:	f043 0301 	orr.w	r3, r3, #1
 8009cca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cd4:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <HAL_PCD_SuspendCallback+0x48>)
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	4a03      	ldr	r2, [pc, #12]	; (8009ce8 <HAL_PCD_SuspendCallback+0x48>)
 8009cda:	f043 0306 	orr.w	r3, r3, #6
 8009cde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	e000ed00 	.word	0xe000ed00

08009cec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe fcb3 	bl	8008666 <USBD_LL_Resume>
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d1a:	78fa      	ldrb	r2, [r7, #3]
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fd0b 	bl	800873a <USBD_LL_IsoOUTIncomplete>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d3e:	78fa      	ldrb	r2, [r7, #3]
 8009d40:	4611      	mov	r1, r2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fcc7 	bl	80086d6 <USBD_LL_IsoINIncomplete>
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe fd1d 	bl	800879e <USBD_LL_DevConnected>
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe fd1a 	bl	80087b4 <USBD_LL_DevDisconnected>
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d13c      	bne.n	8009e12 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d98:	4a20      	ldr	r2, [pc, #128]	; (8009e1c <USBD_LL_Init+0x94>)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a1e      	ldr	r2, [pc, #120]	; (8009e1c <USBD_LL_Init+0x94>)
 8009da4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009da8:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <USBD_LL_Init+0x94>)
 8009daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009dae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009db0:	4b1a      	ldr	r3, [pc, #104]	; (8009e1c <USBD_LL_Init+0x94>)
 8009db2:	2206      	movs	r2, #6
 8009db4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009db6:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <USBD_LL_Init+0x94>)
 8009db8:	2202      	movs	r2, #2
 8009dba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009dbc:	4b17      	ldr	r3, [pc, #92]	; (8009e1c <USBD_LL_Init+0x94>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dc2:	4b16      	ldr	r3, [pc, #88]	; (8009e1c <USBD_LL_Init+0x94>)
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009dc8:	4b14      	ldr	r3, [pc, #80]	; (8009e1c <USBD_LL_Init+0x94>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dce:	4b13      	ldr	r3, [pc, #76]	; (8009e1c <USBD_LL_Init+0x94>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009dd4:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <USBD_LL_Init+0x94>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dda:	4b10      	ldr	r3, [pc, #64]	; (8009e1c <USBD_LL_Init+0x94>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009de0:	4b0e      	ldr	r3, [pc, #56]	; (8009e1c <USBD_LL_Init+0x94>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009de6:	480d      	ldr	r0, [pc, #52]	; (8009e1c <USBD_LL_Init+0x94>)
 8009de8:	f7f8 fa12 	bl	8002210 <HAL_PCD_Init>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009df2:	f7f6 ffcd 	bl	8000d90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009df6:	2180      	movs	r1, #128	; 0x80
 8009df8:	4808      	ldr	r0, [pc, #32]	; (8009e1c <USBD_LL_Init+0x94>)
 8009dfa:	f7f9 fc9e 	bl	800373a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dfe:	2240      	movs	r2, #64	; 0x40
 8009e00:	2100      	movs	r1, #0
 8009e02:	4806      	ldr	r0, [pc, #24]	; (8009e1c <USBD_LL_Init+0x94>)
 8009e04:	f7f9 fc52 	bl	80036ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e08:	2280      	movs	r2, #128	; 0x80
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	4803      	ldr	r0, [pc, #12]	; (8009e1c <USBD_LL_Init+0x94>)
 8009e0e:	f7f9 fc4d 	bl	80036ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	200018b8 	.word	0x200018b8

08009e20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f8 fb0e 	bl	8002458 <HAL_PCD_Start>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 f990 	bl	800a168 <USBD_Get_USB_Status>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b084      	sub	sp, #16
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4611      	mov	r1, r2
 8009e62:	461a      	mov	r2, r3
 8009e64:	4603      	mov	r3, r0
 8009e66:	70fb      	strb	r3, [r7, #3]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70bb      	strb	r3, [r7, #2]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e7e:	78bb      	ldrb	r3, [r7, #2]
 8009e80:	883a      	ldrh	r2, [r7, #0]
 8009e82:	78f9      	ldrb	r1, [r7, #3]
 8009e84:	f7f9 f80c 	bl	8002ea0 <HAL_PCD_EP_Open>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 f96a 	bl	800a168 <USBD_Get_USB_Status>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7f9 f855 	bl	8002f70 <HAL_PCD_EP_Close>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f94b 	bl	800a168 <USBD_Get_USB_Status>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009efa:	78fa      	ldrb	r2, [r7, #3]
 8009efc:	4611      	mov	r1, r2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7f9 f92d 	bl	800315e <HAL_PCD_EP_SetStall>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 f92c 	bl	800a168 <USBD_Get_USB_Status>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	460b      	mov	r3, r1
 8009f28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f38:	78fa      	ldrb	r2, [r7, #3]
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7f9 f972 	bl	8003226 <HAL_PCD_EP_ClrStall>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 f90d 	bl	800a168 <USBD_Get_USB_Status>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	da0b      	bge.n	8009f90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f7e:	68f9      	ldr	r1, [r7, #12]
 8009f80:	4613      	mov	r3, r2
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	440b      	add	r3, r1
 8009f8a:	333e      	adds	r3, #62	; 0x3e
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	e00b      	b.n	8009fa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f96:	68f9      	ldr	r1, [r7, #12]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009fa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7f8 ff3f 	bl	8002e56 <HAL_PCD_SetAddress>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 f8c2 	bl	800a168 <USBD_Get_USB_Status>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b086      	sub	sp, #24
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
 8009ffe:	460b      	mov	r3, r1
 800a000:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a010:	7af9      	ldrb	r1, [r7, #11]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	f7f9 f858 	bl	80030ca <HAL_PCD_EP_Transmit>
 800a01a:	4603      	mov	r3, r0
 800a01c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	4618      	mov	r0, r3
 800a022:	f000 f8a1 	bl	800a168 <USBD_Get_USB_Status>
 800a026:	4603      	mov	r3, r0
 800a028:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a02a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	607a      	str	r2, [r7, #4]
 800a03e:	603b      	str	r3, [r7, #0]
 800a040:	460b      	mov	r3, r1
 800a042:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a052:	7af9      	ldrb	r1, [r7, #11]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	f7f8 ffd4 	bl	8003004 <HAL_PCD_EP_Receive>
 800a05c:	4603      	mov	r3, r0
 800a05e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f880 	bl	800a168 <USBD_Get_USB_Status>
 800a068:	4603      	mov	r3, r0
 800a06a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a06c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	4611      	mov	r1, r2
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7f9 f804 	bl	800309a <HAL_PCD_EP_GetRxCount>
 800a092:	4603      	mov	r3, r0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <HAL_PCDEx_LPM_Callback+0x18>
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d01f      	beq.n	800a0f2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a0b2:	e03b      	b.n	800a12c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d007      	beq.n	800a0cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a0bc:	f7f6 fa6e 	bl	800059c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0c0:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <HAL_PCDEx_LPM_Callback+0x98>)
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	4a1b      	ldr	r2, [pc, #108]	; (800a134 <HAL_PCDEx_LPM_Callback+0x98>)
 800a0c6:	f023 0306 	bic.w	r3, r3, #6
 800a0ca:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0de:	f023 0301 	bic.w	r3, r3, #1
 800a0e2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fabb 	bl	8008666 <USBD_LL_Resume>
    break;
 800a0f0:	e01c      	b.n	800a12c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	6812      	ldr	r2, [r2, #0]
 800a100:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a104:	f043 0301 	orr.w	r3, r3, #1
 800a108:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe fa92 	bl	800863a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d005      	beq.n	800a12a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <HAL_PCDEx_LPM_Callback+0x98>)
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	4a04      	ldr	r2, [pc, #16]	; (800a134 <HAL_PCDEx_LPM_Callback+0x98>)
 800a124:	f043 0306 	orr.w	r3, r3, #6
 800a128:	6113      	str	r3, [r2, #16]
    break;
 800a12a:	bf00      	nop
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	e000ed00 	.word	0xe000ed00

0800a138 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a140:	4b03      	ldr	r3, [pc, #12]	; (800a150 <USBD_static_malloc+0x18>)
}
 800a142:	4618      	mov	r0, r3
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	20001dc4 	.word	0x20001dc4

0800a154 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]

}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a176:	79fb      	ldrb	r3, [r7, #7]
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d817      	bhi.n	800a1ac <USBD_Get_USB_Status+0x44>
 800a17c:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <USBD_Get_USB_Status+0x1c>)
 800a17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a182:	bf00      	nop
 800a184:	0800a195 	.word	0x0800a195
 800a188:	0800a19b 	.word	0x0800a19b
 800a18c:	0800a1a1 	.word	0x0800a1a1
 800a190:	0800a1a7 	.word	0x0800a1a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
    break;
 800a198:	e00b      	b.n	800a1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a19a:	2303      	movs	r3, #3
 800a19c:	73fb      	strb	r3, [r7, #15]
    break;
 800a19e:	e008      	b.n	800a1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a4:	e005      	b.n	800a1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1aa:	e002      	b.n	800a1b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b0:	bf00      	nop
  }
  return usb_status;
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <__libc_init_array>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	4d0d      	ldr	r5, [pc, #52]	; (800a1f8 <__libc_init_array+0x38>)
 800a1c4:	4c0d      	ldr	r4, [pc, #52]	; (800a1fc <__libc_init_array+0x3c>)
 800a1c6:	1b64      	subs	r4, r4, r5
 800a1c8:	10a4      	asrs	r4, r4, #2
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	42a6      	cmp	r6, r4
 800a1ce:	d109      	bne.n	800a1e4 <__libc_init_array+0x24>
 800a1d0:	4d0b      	ldr	r5, [pc, #44]	; (800a200 <__libc_init_array+0x40>)
 800a1d2:	4c0c      	ldr	r4, [pc, #48]	; (800a204 <__libc_init_array+0x44>)
 800a1d4:	f000 f820 	bl	800a218 <_init>
 800a1d8:	1b64      	subs	r4, r4, r5
 800a1da:	10a4      	asrs	r4, r4, #2
 800a1dc:	2600      	movs	r6, #0
 800a1de:	42a6      	cmp	r6, r4
 800a1e0:	d105      	bne.n	800a1ee <__libc_init_array+0x2e>
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e8:	4798      	blx	r3
 800a1ea:	3601      	adds	r6, #1
 800a1ec:	e7ee      	b.n	800a1cc <__libc_init_array+0xc>
 800a1ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f2:	4798      	blx	r3
 800a1f4:	3601      	adds	r6, #1
 800a1f6:	e7f2      	b.n	800a1de <__libc_init_array+0x1e>
 800a1f8:	0800a298 	.word	0x0800a298
 800a1fc:	0800a298 	.word	0x0800a298
 800a200:	0800a298 	.word	0x0800a298
 800a204:	0800a29c 	.word	0x0800a29c

0800a208 <memset>:
 800a208:	4402      	add	r2, r0
 800a20a:	4603      	mov	r3, r0
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d100      	bne.n	800a212 <memset+0xa>
 800a210:	4770      	bx	lr
 800a212:	f803 1b01 	strb.w	r1, [r3], #1
 800a216:	e7f9      	b.n	800a20c <memset+0x4>

0800a218 <_init>:
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21a:	bf00      	nop
 800a21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21e:	bc08      	pop	{r3}
 800a220:	469e      	mov	lr, r3
 800a222:	4770      	bx	lr

0800a224 <_fini>:
 800a224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a226:	bf00      	nop
 800a228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a22a:	bc08      	pop	{r3}
 800a22c:	469e      	mov	lr, r3
 800a22e:	4770      	bx	lr
